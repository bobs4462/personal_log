==== Вопрос 1 ====

	*Проект* – это временное предприятие, предназначенное для созданияуникальных
продуктов, услуг или результатов. Временный характер проектаозначает, что у
любого проекта есть определенное начало и завершение.Большинство проектов
предпринимается для достижения устойчивого,длительного результата.Каждый проект
приводит к созданию уникального продукта, услуги илирезультата. Несмотря на то,
что в результатах проекта могут присутствоватьповторяющиеся элементы, их наличие
не нарушает принципиальнойуникальности работ по проекту.

*Примеры проектов:*  Внедрение нового технологического процесса на производстве,
Миграция данных на новую СУБД.

*Активы процессов организации* — это планы, процессы, политики, процедуры и базы
знаний, специфичные для исполняющей организации и используемые ей. Они включают
в себя любые артефакты, методы и знания некоторых или всех организаций,
участвующих в проекте, которые могут быть использованы для исполнения или
руководства проектом.

*5 групп процессов управления проектами:*
- инициация.
- планирование.
- исполнение.
- мониторинг 
- и управление.

*2 категории процессов проекта:*
* процессы управления проектом
* процессы, ориентированные на продукт

*Задачи управления проектами:*
- определение требований;
- удовлетворение различных потребностей;
- уравновешивание ограничение проекта;
  * содержание
  * качество
  * расписание
  * бюджет
  * ресурсы
  * риски

==== Вопрос 2 ====

*Программа* - это ряд связанных друг с другом проектов управление которыми
координируется для достижения преимуществ и степени управляемости, не доступных
при управлении ими по отдельности.
*Управление программами* - централизованное и скоординированное управление группой
проектов, для достижения стратег. целей и преимущств программ.

*Портфель* - набор проектов и программ или других работ объединённых вместе с
целью эффективного управления данными работами для достижения стратегических
целей.

*Менеджер проекта* - лицо назначенное организ. ответсвенное за достижение целей
проекта. Способность достигать результатов, и быть компетентным (лидерские
кач-ва).

*Заинтересованные стороны* - лица или орг-ции (заказчики, спонсоры, исполняющие
организации), активно учавствующие в проекте, или интересы которых могут быть
затронуты (положительно или отрицательно) в ходе выполнения проекта.

==== Вопрос 3 ====

*Жизненный цикл проекта* - набор последовательных и иногда перекрывающихся фаз
проекта, название и кол-во которых определяется в потребности в управлении и
контроле, характером самого проекта или его прикладной области.

* Начало проекта
* Организация и подготовка
* Выполнение работ проекта
* Завершение проекта


*Характеристики обобщенной структуры жизненого цикла проекта:* 
* Стоимость и вовлечение персонала в проект невелики в начале, достигают
  пикового значения по мере выполнения работ и стремительно падают на этапе
  завершения проекта
* Влияние заинтересованных сторон проекта, риск и неопределённость имеют
  наибольшие значения в начале проекта
* Стоимость изменений и коррекций ошибок, как правило существенно возрастает по
  мере выполнения проекта.
  
*Проекты и операционная деятельность* 
*Операционная деятельность* является постаянной, и даёт на выходе повторяющийся
продукты, услуги и результаты.
*Проекты* являются временными и конечными.


==== Вопрос 4 ====

*Жизненный цикл проекта* - набор последовательных и иногда перекрывающихся фаз
проекта, название и кол-во которых определяется в потребности в управлении и
контроле, характером самого проекта или его прикладной области.

* Начало проекта
* Организация и подготовка
* Выполнение работ проекта
* Завершение проекта

*Типы организационных структур предприятия:*
- функциональные
- матричная
- проектная 
  
*Классическая функциональная организация* является иерархией, где у каждого
сотрудника есть вышестоящий начальник, штатные сотрудники сгруппированы по
функциональным подразделениям. 
Каждый отдел функционального подразделения будет выполнять свою работу по
проекту не зависимо от других отделов.

*Слабая матричная организация*. Роль менеджера - роль координатора или диспетчера.
Сбалансирования матричная организация. Признается необходимость в менеджере
проекта, но не наделяет его всей полнотой власти.
Сильная матричная организация. Менеджер с полной занятостью, а также
админстративный персонал на 

==== Вопрос 5 ====

*Проектная организация*. Все члены проекта в одном месте, менеджер имеет высокую
долю власти и самостоятельности.

*Комбинированная организация*. Функциональная организация может создать спец.
команду проекта, команда может включать персонал с полной занятостью из
различных функциональных отделов.

*жизненный цикл* (life cycle): Развитие системы, продукта, услуги, проекта
или других изготовленных человеком объектов, начиная со стадии разработки
концепции и заканчивая прекращением применения

*модель жизненного цикла* (life cycle model): Структура процессов и действий,
связанных с жизненным циклом, организуемых в стадии, которые также служат в
качестве общей ссылки для установления связей и взаимопонимания сторон 

*программная составная часть* (software item): Исходный код, объектный код,
контрольный код, контрольные данные или совокупность этих составных частей

*программный продукт* (software product): Совокупность компьютерных программ,
процедур и, возможно, связанных с ними документации и данных

*программный блок* (software unit): Отдельная компилируемая часть кода 


*Стандартизованные процессы управления программными проектами*
Процессы проекта включают:
- процесс планирования проекта;
- оценка процесса и процесс управления;
- процесс менеджмента решений;
- процесс менеджмента рисков;
- процесс менеджмента конфигурации;
- процесс менеджмента информации;
- процесс измерений.

Процессы организационного обеспечения проекта
включают:
- процесс менеджмента модели жизненного цикла;
- процесс менеджмента инфраструктуры;
- процесс менеджмента портфеля проектов;
- процесс менеджмента ресурсов;
- процесс менеджмента качества.

*Основные 10 областей знаний программной инженерии:*
1. Software requirements – программные требования.
2. 2. Software design – дизайн (архитектура).
3. 3. Software construction – конструирование программного
4. обеспечения.
5. 4. Software testing – тестирование.
6. 5. Software maintenance – эксплуатация (поддержка)
7. программного обеспечения.
8. 6. Software configuration management – конфигурационное
9. управление.
10. 7. Software engineering management – управление в программной
11. инженерии.
12. 8. Software engineering process – процессы программной
13. инженерии.
14. 9. Software engineering tools and methods – инструменты и
15. методы.
16. 10. Software quality – качество программного обеспечения.

*Дополнительные 7 областей знаний программной инженерии:*
1. Computer engineering – разработка компьютеров
2. Computer science – информатика
3. Management – общий менеджмент
4. Mathematics – математика
5. Project management – управление проектами
6. Quality management – управление качеством
7. Systems engineering – системное проектирование

==== Вопрос 6 ====

*Подходы к разработке ПО:*
*«Как получится»* Разомкнутая система управления.  *Водопад или каскадная
модель* Жесткое управление разработкой с обратной связью.  *Гибкое управление*.
Расчет опорной траектории проекта, измерение отклонений, расчет новой попадающей
траектории и коррекция для выхода на нее.


*Классическае касскадная модель разработки ПО*

*Краткая характеристика модели:*

* выполнение разработки реализуется с помощью упорядоченной последовательности
  шагов;
* каждая последующая фаза начинается только тогда, когда полностью завершена
  предыдущая.
* каждая фаза имеет определенные критерии входа и выхода;
* генерируется внутренние или внешние данные проекта, включая документацию и ПО;
* переход от одной фазы к другой осуществляется путем формального обзора.

*Преимещества каскадной модели:*

- доступна для понимания, проста и удобна в применении;
- хорошо срабатывает для достаточно понятных, но трудно разрешимых проектов,
  когда требование к кач-ву стабильны и доминируют над требованиями к затратам и
  графику выполнения проекта;
- обеспечивает строгий контроль менеджмента проекта и процедуры по контролю за
  качеством.
- дефекты можно обнаружить на более ранних этапах разработки.

*Недостатки каскадной модели:*

- трудность исправления совершенных ошибок;
- модель не расчитана на динамические изменения в требованиях;
- необходимость в жестком управлении и контроле;
- весь программный продукт разработывается за один раз.
- отсуствие возможности учесть переделку и итерации за рамками проекта.

*Область применения каскадной модели:*

- требования и их реализация максимально четко определены и понятны;
- используются неизменяемое определение продукта и вполне понятные технические
  методики;
- если компания имеет опыт построения определенного рода системы;
- используются при выполнении больших проектов.

*Модель быстрой разработки приложений*

*Краткая характеристика модели:*

- пользователь задействован на всех фазах ЖЦ разработки проекта;
- метод основывается на последовательности итераций эволюционной системы и
  прототипов;
- разработка каждого интегрированного продукта ограничивается четко определённым
  периодом времени;
- использование мощных инструментальных средств разработки, высокий уровень
  фактора повтор. исользования;
- основное участие пользователя предустмотрено в процессе планирования и
  проектирования.
  

*Преимущества модели быстрой разработки приложений:*

- время цикла разработки для всего проекта можно сократить благодаря
  использованию мощных инструментальных средств;
- благодаря сокращенному времени цикла, а также меньшему кол-ву разработчиков
  уменьшаются затраты и риски связанных с графиком;
- привлечение заказчика на постаянной основе снижает риск его
  неудовлетворённости продуктом.
  
*Недостатки модели быстрой разработки приложений:*
- если пользователи не могут принимать участие в процессе разработки, это может
  негативно сказаться на конечном продукте.
- необходимо достаточное количество высококвалифицированных разработчиков,
  готовых совместно с заказчиком, к быстрому выполнению действий ввиду жестких
  временных ограничений;
- использование модели может оказаться неудачным для повторного использования
  компоненты.

*Область применения быстрой разработки приложений:*

- системы поддающиеся моделированию и масшатибированию;
- когда конечный пользователь может принимать участие в процессе разработки на
  протяжении всего ЖЦ;
- при выполнении проектов разработка которых должна быть выполнена в сокращенные
  сроки;
- когда существуют пригодные для повторного использования компоненты;
- в системах в которых не требуется достижение высокой производительности.

==== Вопрос 7 ====

*V-образная модель*

*Краткая характеристика модели:*

- особое значение придается действиям, направленным на верификацию и аттестицию
  продукта;
- модель демонстр. что тестирование продукта обсуждается, проектируется и
  планируюется на ранних этапх ЖЦ;
- испытания и приемка системы заказчиком определяются на этапе планирования, а
  компоновочное испытание системы - на фазах анализа, разработки.
- подчеркнуты взаимосвязи между фазами и эти фазы необходимо рассматривать
  параллельно. 

*Преимещества V-образной модели:*

- фаза модульного тестирования подтверждает правильность детализованного
  проектирования;
- фазы интеграции и тестирования реилизует архитектурное проектирование или
  проектирование на высшем уровне;
- фаза тестирования системы подтверждает правильность выполнения этапа
  разработки требований продукта и спецификаций;
- возможность отслеживание хода процесса разработки;
- модель проста в использовании.


*Недостатки V-образной модели:*

- непросто справиться с параллельными событиями;
- не учтены итерации между фазами;
- не предусмотрены внеснение изменений на разных этапах ЖЦ;
- тестирование требований в ЖЦ происходит слишком поздно.

*Область применения V-образной модели:*

- когда вся информация о требованиях доступна заранее;
- когда доступными являются информация о методе реализации решения и технология;
- V-образная модель - это отличный выбор для систем, в которых требуется высокая
  надёжность. 

*Инкрементная модель разработки ПО*

*Краткая характеристика инкрементной модели:*

- инкрементная разработка представляетс собой процесс частичной реализации всей
  системы и медленного наращивания функциональных возможностей или
  эффективности;
- инкрементная модель действует по принципу каскадной модели с перекрытиями,
  благодаря чему функциональные возможности, пригодные для эксплуатации
  формируются раньше;
- применяются инкрементные этапы;
- каждый инкремент проходит через фазы ЖЦ:
	- кодирование
	- тестирование
	- поставку

*Преимущества инкрементной модели:*

- не требуется заранее тратить средства, необходимые для разработки всего
  проекта
- в результате выполнения каждого инкремента получается функциональный продукт;
- использование последовательных позволяет усовершенствовать продукт, затратив
  при этом намного меньше средств, чем требуется для повторной разработки;
- ускоряется начальный график;
- снижается риск неудачи и изменения требований.

*Недостатки инкрементной модели:*

- в модели не предусмотрены итерации в рамках каждого инкремента;
- определение полной функциональной системы должно осуществляться в начале ЖЦ,
  чтобы обеспечить определение инкремнтов;
- формальный критический анализ и проверку намного труднее выполнить для
  инкрементов чем для системы в целом;
- для модели необходимы качественное планирование и проектирование.

*Область применения инкрементной модели:*

- если большинство требований можно сформулировать заранее;
- потребность быстро доставить на рынок продукт, имеющий функциональные базовые
  свойства;
- для проектов, на выполнение которых предусмотрен большой пероид времени, год;
- когда однопроходная система связана с большой степенью риска.

==== Вопрос 8 ====

*Эволюционная модель быстрого прототипирования*

*Краткая характеристика*

- быстрая частичная реализация системы создается перед этапом определения
  требований или на его протяжении;
- конечные пользователи системы используют ускоренный прототип, а затем путем
  обратной связи, сообщают свое мнение о нем команде, работающей над проектом,
  для согласования требований;
- процесс уточнения продолжатеся до тех пор, пока пользователь не получит что ему
  нужно.
- после завершения процесса определения требований, путем разработки ускоренных
  прототипов получают детальных проект системы.
  

*Преимещества модели прототипирования:*

- взаимодействие заказчика с системой начинается на раннем этапе разработки;
- модель позволяет выполнять гибкое проектирование и разработку;
- возможность возникновения разногласий при общении заказчиков с разработчиками
  минимизорована;
- благодаря меньшему объему доработок уменьшаются затраты на разработку.
- сокращаются общие затраты.

*Недостатки модели прототипирования:*

- с учетом создания рабочего прототипа, качеству всего ПО может быть уделено
  недастаточно внимания;
- решение трудных проблем может отодвигаться на будущее;
- если выполнение проекта завершается досрочно, у конечного пользователя
  останеться только лишь частичная система;
- заказчик может предпочесть получить прототип, вместо версии системы;
- прототипирование вызывает зависимость и может продолжаться очень долго.

*Область применения модели прототипирования:*

- когда требования не известны заранее, не постаянны и требуют изменений или
  детального уточнения;
- когда нужна проверка концепции;
- когда выполняется новая, не имеющая аналогов разработка;
- когда требутся продемонстрировать техническую осуществимость, когда высок
  технический риск;
- особенно хорошо подходит для разработки интенсивно используемых систем
  пользовательского интерфейса.
  
Примеры:
- интерактивные системы;
- СППР;
- сенсорные системы;
- системы медицинской диагностики;

*Спиральная модель*

*Краткая характеристика модели:*
Воплощает преимущества каскадной модели

|----------------------------------------------+----------------------------------------|
| Определение целей, альтернатив и ограничений | Оценка альтернатив и разрешение рисков |
|----------------------------------------------+----------------------------------------|
| Планирование следующей фазы                  | Разработка продукта следующего уровня  |
|----------------------------------------------+----------------------------------------|


*Преимущества спиральной модели:*
- использования ускоренного прототипирования;
- пользователи могут активно принимать участие при планировании, анализе рисков,
  разработке и выполнении оценочных действий;
- обеспечивает разбиение большого объема работы по разработке продукта на
  небольшие части;
- возможность гибкого прототипирования;
- реализованы преимущества инкрементной модели.

*Недостатики спиральной модели:*
- модель может оказаться дорогостоящей;
- модель имеет усложненную структуру (затруднено её применение разработчиками);
- нужны профессиональные знания в области оценки рисков;
- спираль может продолжаться бесконечно.

*Область применения спиральной модели:*
- для проектов, выполнение которых сопряжено со средней и высокой степенью
  риска;
- когда речь идет о применении новой технологии и когда необходимо
  протестировать базовые концепции;
- когда пользователи не уверены в своих потребностях;
- когда требования слишком сложные;
- при разработке новой функции или новой серии продуктов;
- когда ожидаются существенные изменения;
- в случае больших проектов.

==== Вопрос 9 ====

*Адаптированные модели разработки ПО:*

* быстрое отслеживание - требуется высокая ответственность в организации
* параллельный инжиниринг - состоит из нескольких действий:
	* сбор требования;
	* разработка проекта;
	* кодирования;
	* тестирования;
	* интеграция.
  при параллельном инжиниринге все аспекты ЖЦ рассматриваются как можно раньше
* Спиральная модель "win-win" - взаимодействие с разработчиками приоритетно.
  Больше фаз уделено именно на участие заказчика в процессе разработки.
  В этом методе ЖЦ состоит из следующих фаз:
	- Принцип V-образной инкрементной модели
	- Эволюционно-инкрементный принцип
	- Объектно-ориентированное быстрое прототипирование

==== Вопрос 10 ====

*Модель зрелости возможностей CMMI*

Набор CMMI:
- CMMI для разработки
- CMMI для услуг
- CMMI для приобретения

Использование CMMI для разработки:
* определяет 22 процессные области
* Цели процессных областей: общие и специфические. Общие цели применяются ко
  всем  процессным областям.
* Два представление СММ!: непрерывное и ступенчатое. При непрерывном
  представлени процессов используется шкала уровня возможностей от 0 до 5.
  Различные области процессов могут находится на разных уровнях возможнстей.
  Ступенчатое представления - определяет от 1го до 5ти уровней зрелости
  организации. Все процессы фнаходятся на одном уровне

*Система измерения зрелости*
|-----------------------+-----------------------------|
| оптимизируемый        | Фокус на совершенствование  |
|-----------------------+-----------------------------|
| управляемый на основе | Процессы контролируются и   |
| количественных данных | измеряются                  |
|-----------------------+-----------------------------|
| определенный          | Процессы определены на уров |
|                       | не всей организации         |
|-----------------------+-----------------------------|
| управляемый           | Процессы определены на уров |
|                       | не проектов                 |
|-----------------------+-----------------------------|
| начальный             | Процессы не предсказуемы и  |
|                       | слабо контролируемы         |
|-----------------------+-----------------------------|


*Рациональный унифицированный процесс*

Принципы РУП:

- Раняя идентификация и непрерывное устранение основных рисков;
- концентрация на выполнение требований заказчиков;
- ожидание изменений в требованиях, проектных решениях и реализации в процессе
  разработки;
- компонентная архитектура, реализуемая и тестируемая на ранних стадиях проекта;
- постоянное обеспечение качества на всех этапах разработки проекта;
- работа над проектом в сплоченной команде.

РУП использует итеративную модель разработки, в конце каждой итерации проектная
команда должна получить проверочную и функционирующую модель продукта.
ЖЦ состоит из 4х фаз:
- начальная фаза
- фаза уточненения
- построение
- моделирование

==== Вопрос 11 ====

*Модель SPICE*

Схема измерений возможностей процесса:
Уровень 0. Неполный процесс
Уровень 1. Осуществленный процесс
Уровень 2. Управляемый процесс
Уровень 3. Установленный процесс
Уровень 4. Предсказуемый процесс
Уровень 5. Оптимизирующий процесс

*Структура решений Microsoft Solutions Framework*

Методология разработки ПО представляющая собой согласованный набор концепций,
моделей и правил, направленной на управление людьми и процессами разработки ПО.

Модель состоит из двух моделей и трех дисциплин

*Модели:*
- проектная группа - описывает подходы к организации персонала и его
  деятельности в достижении максимизации успешности проекта.
- модель процессов - общая методология разработки или внедрения ИТ решений.

*Дисциплины:*

- дисциплина управления проектами - достижение целей проектов в рамках
  согласованных параметров (качество, бюджет, сроки и тд.)
- дисциплина управления рисками - отстаивать превентивный подход к работе с
  рисками в условиях непределённости, непрерывное оценивание рисков и принятие
  решений на протежении всего ЖЦ
- дисциплина управления подготовкой - управление знаниями, профессиональными
  умениями и способностями, необходимых для планирования, создания и
  сопровождения успешных решений.

==== Вопрос 12 ====
*Персональный процесс программного обеспечения | процесс программного обеспечения команды SEI PSP|TSP*

PSP:

- требования необходимые в компетенции разработчика;
- описывает методы планирования и оценки;
- показывает как измерять собственную продуктивность команды, и соотносить с
  сущесвующим планом;
- использование самоуправляемых команд (3-20) человек;
- предпологает использование накопленной статистики для анализа и улучшения
  показателей процесса разработки.
  
Команда должна:
- установить собственные цели;
- составить процесс и планы;
- отслеживать работу;
- поддерживать мотивацию и производительность;

TSP - помогает разработчикам улучшить навыки, управлять кач-вом проектов,
снизить кол-во ошибок в разработках.

==== Вопрос 13 ====

*Гибкие модели разработки ПО*

Использование итеративной разработки, динамическое формирование требований,
обеспечение их реализации в рез-те внутри самоорганизуещейся рабочих групп,
состоящих из специалистов различного профиля. Большинство гибких методологий
нацелено на минимизмцию рисков, путем сведения разработки к серии коротких
целей. Каждая итерация выглядит как программный проект и включает все необх
задачи:
- планирование;
- анализ требований;
- проектирование;
- кодирование;
- конструирование;
- документирование.

Подразумевается что гибкий программный продукт готов к выпуску после каждой
итерации. По оканчанию команда переоценивает приориты разработки.

*14 приемов ХР (экстремальное программирование)*:
- короткий цикл обратной связи;
- разработка через тестирование;
- игра в планирование;
- заказчик всегда рядом;
- парное программирование;
- непрерывный, а не пакетный процесс;
- непрерывная интеграция;
- частые небольшие релизы;
- понимание, разделяемое всеми;
- простота разработки;
- коллективное владение кодом;
- стандарт кодирование;
- социальная защищённость программиста;
- 40-часовая рабочая неделя;

*Метод разработки динамических систем DSDM*

Итеративный и инкрементный подход, предающий особое значение участию в процессе
пользователя

_принципы:_
- вовлечение пользователя;
- команда должна иметь возможность принимать важные решения без начальства;
- частая поставка версий;
- как можно более быстрая поставка программаного обеспечения;
- разработка итеративна и инкрементна;
- любые изменения во время разработки - обратимы;
- взаимодействие и сотрудничество между всеми участниками необходимо для
  эффективности;
  
*FDD - итеративная методология разработки ПО*

*5 базовых видов деятельности:*
- разработка общей модели программного обеспечения;
- составление списка необходимых функций системы;
- планирование работы над каждой функцией;
- проектирование функции;
- реализация функции.

Разработчика делятся на 2 группы:
* хозяин классов;
* главный программистов - привлекают хозяинов к очередным свойствам.

Предпологает частые сборки и делится на итерации, каждая из которых предпологает
реализацию определённого набора функций.

==== Вопрос 14 ====

*Методология управления разработкой информационных систем для гибкой разработки программного обеспечения SCRUM*

Принципы:
- жестко фиксированные и небольшие по времени итерации (спринты)
- предоставление конечному пользоветелю работающее ПО с новыми возможностями,
  для которых определён наибольший приоритет;
- возможности ПО к реализации не могут изменяться на всём протяжении спринта;
- строго фиксированная небольшая длительность спринта.
- 
*ASD - адаптивная модель разработки*

За основу адаптивной модели разработки взяты три нелинейные перекрывающиеся друг
друга фазы:

- обдумывание;
- сотрудничество;
- обучения.

Для преодоления неопределенности в непредсказуемой среде, разрабы должны
сотрудничать между собой, при этом внимание рук-ва напралено на обеспечение
коммуникаций, при которой разрабы самы во всём разбираются.

*Легковесная методология Crystal Clear*

2004 год.
Предназначена для небольших команд (6-8 человек). Для разработки некритичных
бизнес приложений.

*7 практик|методов, 3 обязательные:*
- частая поставки продукта (2 месяца);
- улучшение через рефлексию;
- личные коммуникаций;
- чувство безопасности;
- фокусировка на проблеме;
- простой доступ к экпертам;
- качественной тех окружение.

==== Вопрос 15 ====

*Гибкий унифицированный процесс AUP:*

Описывает простые и легкие приемы для разработки ПО для бизнеса

*Методы AUP состоит из семи методов:*

- моделирование
- реализация
- тестирование
- размещение
- управление конфигурациями
- управление проектом
- среда

*Методология разработки ПО сфокусурованная на анализе требований и моделировании ICONIX*

В рамках *ICONIX* используется подмножество UML для анализа требований:

- диаграмма вариантов использования 
- диаграмма классов
- диаграмма робастности - описывает связь между вариантами использ.
- диаграмма последовательности описывает упорядоченное во времени взаимодействие
  объектов.
  
*Итеративно-инкрементный метод разработки ПО OpenUP*

Легкий и гибкий вариант РУП.

*Принципы:*
 - совместная работа с целью согласования интересов команды и достижения общего
   понимания;
 - развитие с целью непрерывного обеспечения обратной связи и совершенствования
   проекта
 - концентрация на архитектурных вопросах на ранних стадиях для минимизмции
   рисков организации разработки.
 - Выравнивание конкурентных преимуществ для максимизации потребительской
   ценности для заинтересованных лиц.
   
*Фазы ЖЦ OpenUP:*
- начальная фаза
- фаза уточнения
- конструирование
- передачи

OpenUP делит проект на итерации, планируемые ограниченные во времени интервалы
разработки. Коллективы разработчиков самоорганизуются.

*Бережливая разработка ПО*
Методология разработки ПО, использующие концепции бережливого производства, 22
инструмента.  

*Принципы:*
- исключение затрат
- акцент на обучение
- предельно отсроченное принятие решений
- предельно быстрая доставка заказчику
- мотивация команды
- интегрирование, стремление к целостной архитектуре
- целостное видение.


==== Вопрос 16 ====

*Группа процессов инициации*

*В ходе процесса инициации:*
- уточненяются первоначальное описание содержание и ресурсы;
- выбирается менеджер проекта;
- документируются исходные допущения и ограничения.

*Процессы предметные области:*
- определяют матричный набор, в котором устанавливается соответствие между
  предметными областями класса продукта, подходами к разработке продукта и
  разработываемыми компетентами ПО.
- определяют критерии моделей выбора проекта.
- анализирует портфель заказов проекта
- определяют взаимодействие можду основными финансовыми составляющими.

*Классы предметных областей:*
- потребитильский - продукты для личного потребления, рынок массовый. (мобильные
  телефоны с ПО, авто с ПО, тв с ПО, ПК с ПО).
- деловой - ключевой задачей является организация деловым заказчиками
  экономически выгодного продукта, для увеличения прибыли. (БД, 1С).
- индустриальный - промышленность. ПО приобретаются для удовлетворения
  специфичекских потребностей, автоматизация машин, деятельности предприятий.
  Используются в отдельной индустриальной отрасли. (CAD).
- Режим реального времени - используются с целью управления процессами, которые
  имеют ограниченный лимит во времени. Применяются при сборе данных, имеющим
  отношение к событиям, длящихся менее 1 микросек. (Управление мед
  устройствами).
- Продукт с минимальной задержкой - разрабатывается с учетом ограниченного
  запаса времени, выделяемого на его выполнение. 
- Научный - иммитируют процессы реального мира с помощью мат. моделей. Результат
  большой объем вычислений. (Матлаб, Маткад).
 
*Подходы к разработке продукта:*
1. новый продукта
2. реинжиниринг существующего ПО
3. интеграция компетентов
4. сопровождение

*Классы компонентов продукта и связанные с ним системные компоненты:*

1. программное обеспечение
2. аппаратное обеспечение, системное и не целевое программное обеспечение и
   данные
3. человеческий фактор (основной, поддерживающий и сопровождающий персонал)
4. база данных (целевые данные)
5. документация
6. процедуры (или деловые правила)


==== Вопрос 17 ====

*Модели выбора проектов*

*Определение критериев выбора проекта*

Основные причины группировки проектов:
- принадлежность к одному и тому же семейству продуктов;
- устранение дефицита ресурсов;
- взаимная независимость между сборочными узлами проекта и промежуточными
  компонентами;
- наличие нескольких противоречащих друг другу целей организации;
- критерии выбора являются количественными либо качественными;
- влияение политических интересов организации;
  
*Модель выбора проектов:*
- модель экономической прибыли - в ней финансовые измерения применяются для
  определения нормы прибыли, чистой приведённой стоимости, маргинальной
  стоимости капитала. прибыли на инвест. капитал, величины активов и
  инвестированного капитала, а также средней взевешенной стоимости капитала. 

==== Вопрос 18 ====

- модель "затраты-прибыль" - такие модели применяются при сравнении
  альтернативных проектов, когда некоторые преимущества практически
  неосуществимы. Для каждого проекта вычисляются премущства, которые умножаются
  на среднее, затем происходит распределение рейтингов, больше - лучше.
- модель исследования рынка - при разработке новых продуктов. Методики:
	- выделенные группы
	- обзор рынка
	- панель потребителя
	- тестовый маркетинг
- модель реализации техники взвешенного измерения - для каждого процесса свои
  параметры (степень риска, длительность, затраты), вычисляется среднее
  значение суммы взвешенных результатов измерения для каждого проекта,
  происходит ранжирование проектов в соответствии с результатами 
- модель количественной оценки Delphi - мнение экспертов, анкетные листы
  анонимно среди экспертов. После каждого раунда опроса, информация обобщается,
  и повторно распространяется среди тех же экспертов. 
- квалифицированный маркетинг - комбинирование, учитывается ограниченность
  ресурсов. Результат - максимизация отдачи при достижении специфических целей
  проекта. А также подготовка оптимального продукта.
- финансовая модель DuPoint, выбор проекта осуществляется в зависимости от
  экономических параметров: величина прибыли и коэффициент оборота, которые
  зависят от цены продукта, себестоимости единицы единицы продукта, объема
  реализованной продукции


==== Вопрос 19 ====
*Концепция содержит разделы:*
 
1) Название проекта
2) 2) Цели проекта
3) Результаты проекта
4) Допущения и ограничения
5) Ключевые участники и заинтересованные стороны
6) Ресурсы проекта
7) Сроки
8) Риски
9) Критерии приемки
10) Обоснование полезности проекта 


*Характеристики и метрические показатели ценности проекта*
Приоритет любого проекта должен определяться на основе оценки его характеристик:
1) Финансовая ценность
2) Стратегическая ценность
3) Уровень рисков 

==== Вопрос 20 ====

*Структура пооперационного перечня работ* (WORK BREAKDOWN STRUCTURE) -
иерархический перечень рабочих действий, необходимых для завершения проекта.

Перечень включает управленческие, административные, интегральные и
программистские действия с помощью которых:
- выполняется разработка ПО
- происходит управление проектом
- обеспечивается поддержка всех действий, выполняемых в ходе осуществления
  проекта
- выполняются любые другие действия, создание документации разработка учебных
  программ
  
  
*Потребность в структуре СППР необходима при:*
- оценке затрат, включая:
	- обеспечение оценки выполняемых действий
	- обеспечение соответствия каждого элемента оценки рассматриваемому действию
	- детализации фактических затрат
	- пересчет затрат на производство
- Выполнение графика, включая:
	- отслеживание завершенных действий
	- оценка хода выполнения проекта
- Способы описания структуры WBS:
	- иерархической древовидной схемой компонент продукта или действия
	- списком действий, разделённых отступами. Представление в форме дерева
	  более эффективна в случае представления функциональных возможностей,
	  модулей, компонент ПО и системы в целом.

*Виды представления структуры WBS:*
- представление продукта - указывает иерархические взаимосвязи среди элементов
  продуката
- представление проекта - указывает иерархические взаимосвязи среди действий
  выполняемых в рамках проекта
  
==== Вопрос 21 ====

*Особенности создания структуры WBS*
- уникальность пооперационного перечня работ для каждого ЖЦ
- уникальность порядка выполнения действий, для каждого ЖЦ, можно пропускать
  действия
  
*Методы создание структуры WBS:*

- ранжирование действий в соответствии с основными рабочими и поставляемыми
  продуктами
- сегменитрование работы путём её организации на высшем уровне
- дополнительные варианты структурирования
- подход сверху-вниз (дробление задачи на подзадачи, для выполнения 1ой единицей
  ресурса.
- подход снизу-вверх, идаально подходит при разработке проектов новых типов,
  когда команда разработчиков плохо ознакомлена с деталями проекта. В начале
  используется методика мозгового штурма. Затем происходит группировка действий
  с одинаковым уровнем детализации. Группирование всех действий происходит до
  тех пор, пока не будет достигнут элемент высшего уровня.

*Стадия* - значимый событие проекта, связанной с появлением основного рабочего
либо постаянного продукта. Стадия имеет нулевую длительность, которые отмечают
момент времени, в который завершается некий этап проекта, стадии могут отмечать
завершение одного или нескольких действий. Фазы не тоже самое что и стадии.
*Фаза* - набор взаимосвязанных действий по разработке продукта. Стадии могут применяться
для отметки времени завершения фазы.

== Проектирование рабочих пакетов ==

В основном вся работы выполненяется на нижнем уровне СППР - рабочий отдел. В
пакете описываетсчя вся необходимая инфа для выполенения спецом данного вида
работ. 

*Рабочий пакет* может содержать:
- описание ожидаемого рабочего продукта
- требования к персоналу
- имена ответственных лиц
- дата начала выполнения действия, график, и дата завершения
- оценка трудозатрат при выполнения действия

*Порядок создания структуры WBS*
- идентификация работы, связанной с разработкой ПО
- определить структуру WBS для произвольной системы высшего уровня
- определить программную архитектуру WBS
- наполнить содержимым программную архитектуру WBS
- определить категории затрат, связанных с ПО

*Действия, свазанные с разработкой ПО:*
- просмотр доступной документации
- составление полного перечня всех элементов, влияющих на понесённые затраты.

*На этом этапе доступными должны быть следующие исходные документы:*
- рабочий план
- спецификации, концепции деятельности
- любые документы, определяющие требования
- документы по разработкке проекта
- стандарты (внутренние, внешние)
- результат переговоров с заказчиками
- проверочные элементы


*Этапы поиска структуры WBS для произвольной системы высшего уровня:*
- опредление существования структуры WBS для произвольной системы высшего уровня
- установление приемлимости ПО в данном случае
- определение момента, при наступлении которого ПО будет сопоставимо с
  действиями
  
*Определение программной архитектуры WBS:*
Определение логической структуры (архитектуры) для программных частей структуры
WBS, на основе существующих в организации стандартных программных архитектур
WBS. Для различных 

Указание сведений для программной архитектуры WBS

Заполнение выбранной структуры СППР действиями, в ходе внедрения которых
выполняется работы

Структура СППР может выступать в роли элемента отслеживания требований

Отлеживание требований 

*Определение категорий затрат для ПО8

Определение категорий оценки затрат для каждого элемента в структуре СППР
В некоторых проектах применяется одна категория затрат - время, с целью
упращения.

В сложных требуется большее кол-во затрат например:
- капитальное оборудывание
- трудозатраты
- элементы накладных расходов могут оцениваться с помощью пропорцианальных
  добавлений в базовых оценках трудозатрат на разработку ПО (%)


  
==== Вопрос 22 ====
==== Вопрос 23 ====
==== Вопрос 24 ====
==== Вопрос 24 ====
==== Вопрос 25 ====
==== Вопрос 26 ====
==== Вопрос 27 ====
==== Вопрос 28 ====
==== Вопрос 29 ====
==== Вопрос 30 ====
==== Вопрос 31 ====
==== Вопрос 32 ====
==== Вопрос 33 ====
==== Вопрос 34 ====
==== Вопрос 35 ====
==== Вопрос 36 ====


