==== Вопрос 1 ====

	*Проект* – это временное предприятие, предназначенное для созданияуникальных
продуктов, услуг или результатов. Временный характер проектаозначает, что у
любого проекта есть определенное начало и завершение.Большинство проектов
предпринимается для достижения устойчивого,длительного результата.Каждый проект
приводит к созданию уникального продукта, услуги илирезультата. Несмотря на то,
что в результатах проекта могут присутствоватьповторяющиеся элементы, их наличие
не нарушает принципиальнойуникальности работ по проекту.

*Примеры проектов:*  Внедрение нового технологического процесса на производстве,
Миграция данных на новую СУБД.

*Активы процессов организации* — это планы, процессы, политики, процедуры и базы
знаний, специфичные для исполняющей организации и используемые ей. Они включают
в себя любые артефакты, методы и знания некоторых или всех организаций,
участвующих в проекте, которые могут быть использованы для исполнения или
руководства проектом.

*5 групп процессов управления проектами:*
- инициация.
- планирование.
- исполнение.
- мониторинг 
- и управление.

*2 категории процессов проекта:*
* процессы управления проектом
* процессы, ориентированные на продукт

*Задачи управления проектами:*
- определение требований;
- удовлетворение различных потребностей;
- уравновешивание ограничение проекта;
  * содержание
  * качество
  * расписание
  * бюджет
  * ресурсы
  * риски


==== Вопрос 2 ====

*Программа* - это ряд связанных друг с другом проектов управление которыми
координируется для достижения преимуществ и степени управляемости, не доступных
при управлении ими по отдельности.
*Управление программами* - централизованное и скоординированное управление группой
проектов, для достижения стратег. целей и преимущств программ.

*Портфель* - набор проектов и программ или других работ объединённых вместе с
целью эффективного управления данными работами для достижения стратегических
целей.

*Менеджер проекта* - лицо назначенное организ. ответсвенное за достижение целей
проекта. Способность достигать результатов, и быть компетентным (лидерские
кач-ва).

*Заинтересованные стороны* - лица или орг-ции (заказчики, спонсоры, исполняющие
организации), активно учавствующие в проекте, или интересы которых могут быть
затронуты (положительно или отрицательно) в ходе выполнения проекта.


==== Вопрос 3 ====

*Жизненный цикл проекта* - набор последовательных и иногда перекрывающихся фаз
проекта, название и кол-во которых определяется в потребности в управлении и
контроле, характером самого проекта или его прикладной области.

* Начало проекта
* Организация и подготовка
* Выполнение работ проекта
* Завершение проекта

*Характеристики обобщенной структуры жизненого цикла проекта:* 
* Стоимость и вовлечение персонала в проект невелики в начале, достигают
  пикового значения по мере выполнения работ и стремительно падают на этапе
  завершения проекта
* Влияние заинтересованных сторон проекта, риск и неопределённость имеют
  наибольшие значения в начале проекта
* Стоимость изменений и коррекций ошибок, как правило существенно возрастает по
  мере выполнения проекта.
  
*Проекты и операционная деятельность* 

*Операционная деятельность* является постаянной, и даёт на выходе повторяющийся
продукты, услуги и результаты.

*Проекты* являются временными и конечными.



==== Вопрос 4 ====

*Жизненный цикл проекта* - набор последовательных и иногда перекрывающихся фаз
проекта, название и кол-во которых определяется в потребности в управлении и
контроле, характером самого проекта или его прикладной области.

* Начало проекта
* Организация и подготовка
* Выполнение работ проекта
* Завершение проекта

*Типы организационных структур предприятия:*
- функциональные
- матричная
- проектная 
  
*Классическая функциональная организация* является иерархией, где у каждого
сотрудника есть вышестоящий начальник, штатные сотрудники сгруппированы по
функциональным подразделениям. 
Каждый отдел функционального подразделения будет выполнять свою работу по
проекту не зависимо от других отделов.

*Слабая матричная организация*. Роль менеджера - роль координатора или диспетчера.
Сбалансирования матричная организация. Признается необходимость в менеджере
проекта, но не наделяет его всей полнотой власти.
Сильная матричная организация. Менеджер с полной занятостью, а также
админстративный персонал на 

*Проектная организация*. Все члены проекта в одном месте, менеджер имеет высокую
долю власти и самостоятельности.

*Комбинированная организация*. Функциональная организация может создать спец.
команду проекта, команда может включать персонал с полной занятостью из
различных функциональных отделов.


==== Вопрос 5 ====

*жизненный цикл* (life cycle): Развитие системы, продукта, услуги, проекта
или других изготовленных человеком объектов, начиная со стадии разработки
концепции и заканчивая прекращением применения

*модель жизненного цикла* (life cycle model): Структура процессов и действий,
связанных с жизненным циклом, организуемых в стадии, которые также служат в
качестве общей ссылки для установления связей и взаимопонимания сторон 

*программная составная часть* (software item): Исходный код, объектный код,
контрольный код, контрольные данные или совокупность этих составных частей

*программный продукт* (software product): Совокупность компьютерных программ,
процедур и, возможно, связанных с ними документации и данных

*программный блок* (software unit): Отдельная компилируемая часть кода 

*Стандартизованные процессы управления программными проектами*

Процессы проекта включают:
- процесс планирования проекта;
- оценка процесса и процесс управления;
- процесс менеджмента решений;
- процесс менеджмента рисков;
- процесс менеджмента конфигурации;
- процесс менеджмента информации;
- процесс измерений.

Процессы организационного обеспечения проекта включают:
- процесс менеджмента модели жизненного цикла;
- процесс менеджмента инфраструктуры;
- процесс менеджмента портфеля проектов;
- процесс менеджмента ресурсов;
- процесс менеджмента качества.

*Основные 10 областей знаний программной инженерии:*
1. Software requirements – программные требования.
2. Software design – дизайн (архитектура).
3. Software construction – конструирование программного обеспечения.
4. Software testing – тестирование.
5. Software maintenance – эксплуатация (поддержка)  программного обеспечения.
6. Software configuration management – конфигурационное управление.
7. Software engineering management – управление в программной. инженерии.
8. Software engineering process – процессы программной инженерии.
9. Software engineering tools and methods – инструменты и методы.
10. Software quality – качество программного обеспечения.

*Дополнительные 7 областей знаний программной инженерии:*
1. Computer engineering – разработка компьютеров
2. Computer science – информатика
3. Management – общий менеджмент
4. Mathematics – математика
5. Project management – управление проектами
6. Quality management – управление качеством
7. Systems engineering – системное проектирование


==== Вопрос 6 ====

*Подходы к разработке ПО:*
*«Как получится»* Разомкнутая система управления.  *Водопад или каскадная
модель* Жесткое управление разработкой с обратной связью.  *Гибкое управление*.
Расчет опорной траектории проекта, измерение отклонений, расчет новой попадающей
траектории и коррекция для выхода на нее.

*Классическае касскадная модель разработки ПО*

*Краткая характеристика модели:*

* выполнение разработки реализуется с помощью упорядоченной последовательности
  шагов;
* каждая последующая фаза начинается только тогда, когда полностью завершена
  предыдущая.
* каждая фаза имеет определенные критерии входа и выхода;
* генерируется внутренние или внешние данные проекта, включая документацию и ПО;
* переход от одной фазы к другой осуществляется путем формального обзора.

*Преимещества каскадной модели:*

- доступна для понимания, проста и удобна в применении;
- хорошо срабатывает для достаточно понятных, но трудно разрешимых проектов,
  когда требование к кач-ву стабильны и доминируют над требованиями к затратам и
  графику выполнения проекта;
- обеспечивает строгий контроль менеджмента проекта и процедуры по контролю за
  качеством.
- дефекты можно обнаружить на более ранних этапах разработки.

*Недостатки каскадной модели:*

- трудность исправления совершенных ошибок;
- модель не расчитана на динамические изменения в требованиях;
- необходимость в жестком управлении и контроле;
- весь программный продукт разработывается за один раз.
- отсуствие возможности учесть переделку и итерации за рамками проекта.

*Область применения каскадной модели:*

- требования и их реализация максимально четко определены и понятны;
- используются неизменяемое определение продукта и вполне понятные технические
  методики;
- если компания имеет опыт построения определенного рода системы;
- используются при выполнении больших проектов.

*Модель быстрой разработки приложений*

*Краткая характеристика модели:*

- пользователь задействован на всех фазах ЖЦ разработки проекта;
- метод основывается на последовательности итераций эволюционной системы и
  прототипов;
- разработка каждого интегрированного продукта ограничивается четко определённым
  периодом времени;
- использование мощных инструментальных средств разработки, высокий уровень
  фактора повтор. исользования;
- основное участие пользователя предустмотрено в процессе планирования и
  проектирования.

*Преимущества модели быстрой разработки приложений:*

- время цикла разработки для всего проекта можно сократить благодаря
  использованию мощных инструментальных средств;
- благодаря сокращенному времени цикла, а также меньшему кол-ву разработчиков
  уменьшаются затраты и риски связанных с графиком;
- привлечение заказчика на постаянной основе снижает риск его
  неудовлетворённости продуктом.
  
*Недостатки модели быстрой разработки приложений:*
- если пользователи не могут принимать участие в процессе разработки, это может
  негативно сказаться на конечном продукте.
- необходимо достаточное количество высококвалифицированных разработчиков,
  готовых совместно с заказчиком, к быстрому выполнению действий ввиду жестких
  временных ограничений;
- использование модели может оказаться неудачным для повторного использования
  компоненты.

*Область применения быстрой разработки приложений:*

- системы поддающиеся моделированию и масшатибированию;
- когда конечный пользователь может принимать участие в процессе разработки на
  протяжении всего ЖЦ;
- при выполнении проектов разработка которых должна быть выполнена в сокращенные
  сроки;
- когда существуют пригодные для повторного использования компоненты;
- в системах в которых не требуется достижение высокой производительности.


==== Вопрос 7 ====

*V-образная модель*

*Краткая характеристика модели:*

- особое значение придается действиям, направленным на верификацию и аттестицию
  продукта;
- модель демонстр. что тестирование продукта обсуждается, проектируется и
  планируюется на ранних этапх ЖЦ;
- испытания и приемка системы заказчиком определяются на этапе планирования, а
  компоновочное испытание системы - на фазах анализа, разработки.
- подчеркнуты взаимосвязи между фазами и эти фазы необходимо рассматривать
  параллельно. 

*Преимещества V-образной модели:*

- фаза модульного тестирования подтверждает правильность детализованного
  проектирования;
- фазы интеграции и тестирования реилизует архитектурное проектирование или
  проектирование на высшем уровне;
- фаза тестирования системы подтверждает правильность выполнения этапа
  разработки требований продукта и спецификаций;
- возможность отслеживание хода процесса разработки;
- модель проста в использовании.

*Недостатки V-образной модели:*

- непросто справиться с параллельными событиями;
- не учтены итерации между фазами;
- не предусмотрены внеснение изменений на разных этапах ЖЦ;
- тестирование требований в ЖЦ происходит слишком поздно.

*Область применения V-образной модели:*

- когда вся информация о требованиях доступна заранее;
- когда доступными являются информация о методе реализации решения и технология;
- V-образная модель - это отличный выбор для систем, в которых требуется высокая
  надёжность. 

*Инкрементная модель разработки ПО*

*Краткая характеристика инкрементной модели:*

- инкрементная разработка представляетс собой процесс частичной реализации всей
  системы и медленного наращивания функциональных возможностей или
  эффективности;
- инкрементная модель действует по принципу каскадной модели с перекрытиями,
  благодаря чему функциональные возможности, пригодные для эксплуатации
  формируются раньше;
- применяются инкрементные этапы;
- каждый инкремент проходит через фазы ЖЦ:
	- кодирование
	- тестирование
	- поставку

*Преимущества инкрементной модели:*

- не требуется заранее тратить средства, необходимые для разработки всего
  проекта
- в результате выполнения каждого инкремента получается функциональный продукт;
- использование последовательных позволяет усовершенствовать продукт, затратив
  при этом намного меньше средств, чем требуется для повторной разработки;
- ускоряется начальный график;
- снижается риск неудачи и изменения требований.

*Недостатки инкрементной модели:*

- в модели не предусмотрены итерации в рамках каждого инкремента;
- определение полной функциональной системы должно осуществляться в начале ЖЦ,
  чтобы обеспечить определение инкремнтов;
- формальный критический анализ и проверку намного труднее выполнить для
  инкрементов чем для системы в целом;
- для модели необходимы качественное планирование и проектирование.

*Область применения инкрементной модели:*

- если большинство требований можно сформулировать заранее;
- потребность быстро доставить на рынок продукт, имеющий функциональные базовые
  свойства;
- для проектов, на выполнение которых предусмотрен большой пероид времени, год;
- когда однопроходная система связана с большой степенью риска.


==== Вопрос 8 ====

*Эволюционная модель быстрого прототипирования*

*Краткая характеристика*

- быстрая частичная реализация системы создается перед этапом определения
  требований или на его протяжении;
- конечные пользователи системы используют ускоренный прототип, а затем путем
  обратной связи, сообщают свое мнение о нем команде, работающей над проектом,
  для согласования требований;
- процесс уточнения продолжатеся до тех пор, пока пользователь не получит что ему
  нужно.
- после завершения процесса определения требований, путем разработки ускоренных
  прототипов получают детальных проект системы.

*Преимещества модели прототипирования:*

- взаимодействие заказчика с системой начинается на раннем этапе разработки;
- модель позволяет выполнять гибкое проектирование и разработку;
- возможность возникновения разногласий при общении заказчиков с разработчиками
  минимизорована;
- благодаря меньшему объему доработок уменьшаются затраты на разработку.
- сокращаются общие затраты.

*Недостатки модели прототипирования:*

- с учетом создания рабочего прототипа, качеству всего ПО может быть уделено
  недастаточно внимания;
- решение трудных проблем может отодвигаться на будущее;
- если выполнение проекта завершается досрочно, у конечного пользователя
  останеться только лишь частичная система;
- заказчик может предпочесть получить прототип, вместо версии системы;
- прототипирование вызывает зависимость и может продолжаться очень долго.

*Область применения модели прототипирования:*

- когда требования не известны заранее, не постаянны и требуют изменений или
  детального уточнения;
- когда нужна проверка концепции;
- когда выполняется новая, не имеющая аналогов разработка;
- когда требутся продемонстрировать техническую осуществимость, когда высок
  технический риск;
- особенно хорошо подходит для разработки интенсивно используемых систем
  пользовательского интерфейса.
  
Примеры:
- интерактивные системы;
- СППР;
- сенсорные системы;
- системы медицинской диагностики;

*Спиральная модель*

*Краткая характеристика модели:*

Воплощает преимущества каскадной модели

|----------------------------------------------+----------------------------------------|
| Определение целей, альтернатив и ограничений | Оценка альтернатив и разрешение рисков |
|----------------------------------------------+----------------------------------------|
| Планирование следующей фазы                  | Разработка продукта следующего уровня  |
|----------------------------------------------+----------------------------------------|

*Преимущества спиральной модели:*
- использования ускоренного прототипирования;
- пользователи могут активно принимать участие при планировании, анализе рисков,
  разработке и выполнении оценочных действий;
- обеспечивает разбиение большого объема работы по разработке продукта на
  небольшие части;
- возможность гибкого прототипирования;
- реализованы преимущества инкрементной модели.

*Недостатики спиральной модели:*
- модель может оказаться дорогостоящей;
- модель имеет усложненную структуру (затруднено её применение разработчиками);
- нужны профессиональные знания в области оценки рисков;
- спираль может продолжаться бесконечно.

*Область применения спиральной модели:*
- для проектов, выполнение которых сопряжено со средней и высокой степенью
  риска;
- когда речь идет о применении новой технологии и когда необходимо
  протестировать базовые концепции;
- когда пользователи не уверены в своих потребностях;
- когда требования слишком сложные;
- при разработке новой функции или новой серии продуктов;
- когда ожидаются существенные изменения;
- в случае больших проектов.


==== Вопрос 9 ====

*Адаптированные модели разработки ПО:*

* быстрое отслеживание - требуется высокая ответственность в организации
* параллельный инжиниринг - состоит из нескольких действий:
	* сбор требования;
	* разработка проекта;
	* кодирования;
	* тестирования;
	* интеграция.
  при параллельном инжиниринге все аспекты ЖЦ рассматриваются как можно раньше
* Спиральная модель "win-win" - взаимодействие с разработчиками приоритетно.
  Больше фаз уделено именно на участие заказчика в процессе разработки.
  В этом методе ЖЦ состоит из следующих фаз:
	- Принцип V-образной инкрементной модели
	- Эволюционно-инкрементный принцип
	- Объектно-ориентированное быстрое прототипирование


==== Вопрос 10 ====

*Модель зрелости возможностей CMMI*

Набор CMMI:
- CMMI для разработки
- CMMI для услуг
- CMMI для приобретения

Использование CMMI для разработки:
* определяет 22 процессные области
* Цели процессных областей: общие и специфические. Общие цели применяются ко
  всем  процессным областям.
* Два представление СММ!: непрерывное и ступенчатое. При непрерывном
  представлени процессов используется шкала уровня возможностей от 0 до 5.
  Различные области процессов могут находится на разных уровнях возможнстей.
  Ступенчатое представления - определяет от 1го до 5ти уровней зрелости
  организации. Все процессы фнаходятся на одном уровне

*Система измерения зрелости*
|-----------------------+-----------------------------|
| оптимизируемый        | Фокус на совершенствование  |
|-----------------------+-----------------------------|
| управляемый на основе | Процессы контролируются и   |
| количественных данных | измеряются                  |
|-----------------------+-----------------------------|
| определенный          | Процессы определены на уров |
|                       | не всей организации         |
|-----------------------+-----------------------------|
| управляемый           | Процессы определены на уров |
|                       | не проектов                 |
|-----------------------+-----------------------------|
| начальный             | Процессы не предсказуемы и  |
|                       | слабо контролируемы         |
|-----------------------+-----------------------------|

*Рациональный унифицированный процесс*

Принципы РУП:

- Раняя идентификация и непрерывное устранение основных рисков;
- концентрация на выполнение требований заказчиков;
- ожидание изменений в требованиях, проектных решениях и реализации в процессе
  разработки;
- компонентная архитектура, реализуемая и тестируемая на ранних стадиях проекта;
- постоянное обеспечение качества на всех этапах разработки проекта;
- работа над проектом в сплоченной команде.

РУП использует итеративную модель разработки, в конце каждой итерации проектная
команда должна получить проверочную и функционирующую модель продукта.
ЖЦ состоит из 4х фаз:
- начальная фаза
- фаза уточненения
- построение
- моделирование


==== Вопрос 11 ====

*Модель SPICE*

Схема измерений возможностей процесса:
Уровень 0. Неполный процесс
Уровень 1. Осуществленный процесс
Уровень 2. Управляемый процесс
Уровень 3. Установленный процесс
Уровень 4. Предсказуемый процесс
Уровень 5. Оптимизирующий процесс

*Структура решений Microsoft Solutions Framework*

Методология разработки ПО представляющая собой согласованный набор концепций,
моделей и правил, направленной на управление людьми и процессами разработки ПО.

Модель состоит из двух моделей и трех дисциплин

*Модели:*
- проектная группа - описывает подходы к организации персонала и его
  деятельности в достижении максимизации успешности проекта.
- модель процессов - общая методология разработки или внедрения ИТ решений.

*Дисциплины:*

- дисциплина управления проектами - достижение целей проектов в рамках
  согласованных параметров (качество, бюджет, сроки и тд.)
- дисциплина управления рисками - отстаивать превентивный подход к работе с
  рисками в условиях непределённости, непрерывное оценивание рисков и принятие
  решений на протежении всего ЖЦ
- дисциплина управления подготовкой - управление знаниями, профессиональными
  умениями и способностями, необходимых для планирования, создания и
  сопровождения успешных решений.


==== Вопрос 12 ====

*Персональный процесс программного обеспечения | процесс программного обеспечения команды SEI PSP|TSP*

PSP:

- требования необходимые в компетенции разработчика;
- описывает методы планирования и оценки;
- показывает как измерять собственную продуктивность команды, и соотносить с
  сущесвующим планом;
- использование самоуправляемых команд (3-20) человек;
- предпологает использование накопленной статистики для анализа и улучшения
  показателей процесса разработки.
  
Команда должна:
- установить собственные цели;
- составить процесс и планы;
- отслеживать работу;
- поддерживать мотивацию и производительность;

TSP - помогает разработчикам улучшить навыки, управлять кач-вом проектов,
снизить кол-во ошибок в разработках.


==== Вопрос 13 ====

*Гибкие модели разработки ПО*

Использование итеративной разработки, динамическое формирование требований,
обеспечение их реализации в рез-те внутри самоорганизуещейся рабочих групп,
состоящих из специалистов различного профиля. Большинство гибких методологий
нацелено на минимизмцию рисков, путем сведения разработки к серии коротких
целей. Каждая итерация выглядит как программный проект и включает все необх
задачи:
- планирование;
- анализ требований;
- проектирование;
- кодирование;
- конструирование;
- документирование.

Подразумевается что гибкий программный продукт готов к выпуску после каждой
итерации. По оканчанию команда переоценивает приориты разработки.

*14 приемов ХР (экстремальное программирование)*:
- короткий цикл обратной связи;
- разработка через тестирование;
- игра в планирование;
- заказчик всегда рядом;
- парное программирование;
- непрерывный, а не пакетный процесс;
- непрерывная интеграция;
- частые небольшие релизы;
- понимание, разделяемое всеми;
- простота разработки;
- коллективное владение кодом;
- стандарт кодирование;
- социальная защищённость программиста;
- 40-часовая рабочая неделя;

*Метод разработки динамических систем DSDM*

Итеративный и инкрементный подход, предающий особое значение участию в процессе
пользователя

*принципы:*
- вовлечение пользователя;
- команда должна иметь возможность принимать важные решения без начальства;
- частая поставка версий;
- как можно более быстрая поставка программаного обеспечения;
- разработка итеративна и инкрементна;
- любые изменения во время разработки - обратимы;
- взаимодействие и сотрудничество между всеми участниками необходимо для
  эффективности;
  
*FDD - итеративная методология разработки ПО*

*5 базовых видов деятельности:*
- разработка общей модели программного обеспечения;
- составление списка необходимых функций системы;
- планирование работы над каждой функцией;
- проектирование функции;
- реализация функции.

Разработчика делятся на 2 группы:
* хозяин классов;
* главный программистов - привлекают хозяинов к очередным свойствам.

Предпологает частые сборки и делится на итерации, каждая из которых предпологает
реализацию определённого набора функций.


==== Вопрос 14 ====

*Методология управления разработкой информационных систем для гибкой разработки программного обеспечения SCRUM*

Принципы:
- жестко фиксированные и небольшие по времени итерации (спринты)
- предоставление конечному пользоветелю работающее ПО с новыми возможностями,
  для которых определён наибольший приоритет;
- возможности ПО к реализации не могут изменяться на всём протяжении спринта;
- строго фиксированная небольшая длительность спринта.
- 
*ASD - адаптивная модель разработки*

За основу адаптивной модели разработки взяты три нелинейные перекрывающиеся друг
друга фазы:

- обдумывание;
- сотрудничество;
- обучения.

Для преодоления неопределенности в непредсказуемой среде, разрабы должны
сотрудничать между собой, при этом внимание рук-ва напралено на обеспечение
коммуникаций, при которой разрабы самы во всём разбираются.

*Легковесная методология Crystal Clear*

2004 год.
Предназначена для небольших команд (6-8 человек). Для разработки некритичных
бизнес приложений.

*7 практик|методов, 3 обязательные:*
- частая поставки продукта (2 месяца);
- улучшение через рефлексию;
- личные коммуникаций;
- чувство безопасности;
- фокусировка на проблеме;
- простой доступ к экпертам;
- качественной тех окружение.


==== Вопрос 15 ====

*Гибкий унифицированный процесс AUP:*

Описывает простые и легкие приемы для разработки ПО для бизнеса

*Методы AUP состоит из семи методов:*

- моделирование
- реализация
- тестирование
- размещение
- управление конфигурациями
- управление проектом
- среда

*Методология разработки ПО сфокусурованная на анализе требований и моделировании ICONIX*

В рамках *ICONIX* используется подмножество UML для анализа требований:

- диаграмма вариантов использования 
- диаграмма классов
- диаграмма робастности - описывает связь между вариантами использ.
- диаграмма последовательности описывает упорядоченное во времени взаимодействие
  объектов.
  
*Итеративно-инкрементный метод разработки ПО OpenUP*

Легкий и гибкий вариант РУП.

*Принципы:*
 - совместная работа с целью согласования интересов команды и достижения общего
   понимания;
 - развитие с целью непрерывного обеспечения обратной связи и совершенствования
   проекта
 - концентрация на архитектурных вопросах на ранних стадиях для минимизмции
   рисков организации разработки.
 - Выравнивание конкурентных преимуществ для максимизации потребительской
   ценности для заинтересованных лиц.
   
*Фазы ЖЦ OpenUP:*
- начальная фаза
- фаза уточнения
- конструирование
- передачи

OpenUP делит проект на итерации, планируемые ограниченные во времени интервалы
разработки. Коллективы разработчиков самоорганизуются.

*Бережливая разработка ПО*
Методология разработки ПО, использующие концепции бережливого производства, 22
инструмента.  

*Принципы:*
- исключение затрат
- акцент на обучение
- предельно отсроченное принятие решений
- предельно быстрая доставка заказчику
- мотивация команды
- интегрирование, стремление к целостной архитектуре
- целостное видение.


==== Вопрос 16 ====

*Группа процессов инициации*

*В ходе процесса инициации:*
- уточненяются первоначальное описание содержание и ресурсы;
- выбирается менеджер проекта;
- документируются исходные допущения и ограничения.

*Процессы предметные области:*
- определяют матричный набор, в котором устанавливается соответствие между
  предметными областями класса продукта, подходами к разработке продукта и
  разработываемыми компетентами ПО.
- определяют критерии моделей выбора проекта.
- анализирует портфель заказов проекта
- определяют взаимодействие можду основными финансовыми составляющими.

*Классы предметных областей:*
- потребитильский - продукты для личного потребления, рынок массовый. (мобильные
  телефоны с ПО, авто с ПО, тв с ПО, ПК с ПО).
- деловой - ключевой задачей является организация деловым заказчиками
  экономически выгодного продукта, для увеличения прибыли. (БД, 1С).
- индустриальный - промышленность. ПО приобретаются для удовлетворения
  специфичекских потребностей, автоматизация машин, деятельности предприятий.
  Используются в отдельной индустриальной отрасли. (CAD).
- Режим реального времени - используются с целью управления процессами, которые
  имеют ограниченный лимит во времени. Применяются при сборе данных, имеющим
  отношение к событиям, длящихся менее 1 микросек. (Управление мед
  устройствами).
- Продукт с минимальной задержкой - разрабатывается с учетом ограниченного
  запаса времени, выделяемого на его выполнение. 
- Научный - иммитируют процессы реального мира с помощью мат. моделей. Результат
  большой объем вычислений. (Матлаб, Маткад).
 
*Подходы к разработке продукта:*
1. новый продукта
2. реинжиниринг существующего ПО
3. интеграция компетентов
4. сопровождение

*Классы компонентов продукта и связанные с ним системные компоненты:*

1. программное обеспечение
2. аппаратное обеспечение, системное и не целевое программное обеспечение и
   данные
3. человеческий фактор (основной, поддерживающий и сопровождающий персонал)
4. база данных (целевые данные)
5. документация
6. процедуры (или деловые правила)


==== Вопрос 17 ====

*Модели выбора проектов*

*Определение критериев выбора проекта*

Основные причины группировки проектов:
- принадлежность к одному и тому же семейству продуктов;
- устранение дефицита ресурсов;
- взаимная независимость между сборочными узлами проекта и промежуточными
  компонентами;
- наличие нескольких противоречащих друг другу целей организации;
- критерии выбора являются количественными либо качественными;
- влияение политических интересов организации;
  
*Модель выбора проектов:*
- модель экономической прибыли - в ней финансовые измерения применяются для
  определения нормы прибыли, чистой приведённой стоимости, маргинальной
  стоимости капитала. прибыли на инвест. капитал, величины активов и
  инвестированного капитала, а также средней взевешенной стоимости капитала. 


==== Вопрос 18 ====

- модель "затраты-прибыль" - такие модели применяются при сравнении
  альтернативных проектов, когда некоторые преимущества практически
  неосуществимы. Для каждого проекта вычисляются премущства, которые умножаются
  на среднее, затем происходит распределение рейтингов, больше - лучше.
- модель исследования рынка - при разработке новых продуктов. Методики:
	- выделенные группы
	- обзор рынка
	- панель потребителя
	- тестовый маркетинг
- модель реализации техники взвешенного измерения - для каждого процесса свои
  параметры (степень риска, длительность, затраты), вычисляется среднее
  значение суммы взвешенных результатов измерения для каждого проекта,
  происходит ранжирование проектов в соответствии с результатами 
- модель количественной оценки Delphi - мнение экспертов, анкетные листы
  анонимно среди экспертов. После каждого раунда опроса, информация обобщается,
  и повторно распространяется среди тех же экспертов. 
- квалифицированный маркетинг - комбинирование, учитывается ограниченность
  ресурсов. Результат - максимизация отдачи при достижении специфических целей
  проекта. А также подготовка оптимального продукта.
- финансовая модель DuPoint, выбор проекта осуществляется в зависимости от
  экономических параметров: величина прибыли и коэффициент оборота, которые
  зависят от цены продукта, себестоимости единицы единицы продукта, объема
  реализованной продукции


==== Вопрос 19 ====
*Концепция содержит разделы:*
 
1) Название проекта
2) 2) Цели проекта
3) Результаты проекта
4) Допущения и ограничения
5) Ключевые участники и заинтересованные стороны
6) Ресурсы проекта
7) Сроки
8) Риски
9) Критерии приемки
10) Обоснование полезности проекта 


*Характеристики и метрические показатели ценности проекта*
Приоритет любого проекта должен определяться на основе оценки его характеристик:
1) Финансовая ценность
2) Стратегическая ценность
3) Уровень рисков 


==== Вопрос 20 ====

*Структура пооперационного перечня работ* (WORK BREAKDOWN STRUCTURE) -
иерархический перечень рабочих действий, необходимых для завершения проекта.

Перечень включает управленческие, административные, интегральные и
программистские действия с помощью которых:
- выполняется разработка ПО
- происходит управление проектом
- обеспечивается поддержка всех действий, выполняемых в ходе осуществления
  проекта
- выполняются любые другие действия, создание документации разработка учебных
  программ
  
  
*Потребность в структуре СППР необходима при:*
- оценке затрат, включая:
	- обеспечение оценки выполняемых действий
	- обеспечение соответствия каждого элемента оценки рассматриваемому действию
	- детализации фактических затрат
	- пересчет затрат на производство
- Выполнение графика, включая:
	- отслеживание завершенных действий
	- оценка хода выполнения проекта
- Способы описания структуры WBS:
	- иерархической древовидной схемой компонент продукта или действия
	- списком действий, разделённых отступами. Представление в форме дерева
	  более эффективна в случае представления функциональных возможностей,
	  модулей, компонент ПО и системы в целом.

*Виды представления структуры WBS:*
- представление продукта - указывает иерархические взаимосвязи среди элементов
  продуката
- представление проекта - указывает иерархические взаимосвязи среди действий
  выполняемых в рамках проекта
  
  
==== Вопрос 21 ====

*Особенности создания структуры WBS*
- уникальность пооперационного перечня работ для каждого ЖЦ
- уникальность порядка выполнения действий, для каждого ЖЦ, можно пропускать
  действия
  
*Методы создание структуры WBS:*

- ранжирование действий в соответствии с основными рабочими и поставляемыми
  продуктами
- сегменитрование работы путём её организации на высшем уровне
- дополнительные варианты структурирования
- подход сверху-вниз (дробление задачи на подзадачи, для выполнения 1ой единицей
  ресурса.
- подход снизу-вверх, идаально подходит при разработке проектов новых типов,
  когда команда разработчиков плохо ознакомлена с деталями проекта. В начале
  используется методика мозгового штурма. Затем происходит группировка действий
  с одинаковым уровнем детализации. Группирование всех действий происходит до
  тех пор, пока не будет достигнут элемент высшего уровня.

*Стадия* - значимый событие проекта, связанной с появлением основного рабочего
либо постаянного продукта. Стадия имеет нулевую длительность, которые отмечают
момент времени, в который завершается некий этап проекта, стадии могут отмечать
завершение одного или нескольких действий. Фазы не тоже самое что и стадии.
*Фаза* - набор взаимосвязанных действий по разработке продукта. Стадии могут применяться
для отметки времени завершения фазы.

*Проектирование рабочих пакетов*

В основном вся работы выполненяется на нижнем уровне СППР - рабочий отдел. В
пакете описываетсчя вся необходимая инфа для выполенения спецом данного вида
работ. 

*Рабочий пакет* может содержать:
- описание ожидаемого рабочего продукта
- требования к персоналу
- имена ответственных лиц
- дата начала выполнения действия, график, и дата завершения
- оценка трудозатрат при выполнения действия


==== Вопрос 22 ====

*Порядок создания структуры WBS*
- идентификация работы, связанной с разработкой ПО
- определить структуру WBS для произвольной системы высшего уровня
- определить программную архитектуру WBS
- наполнить содержимым программную архитектуру WBS
- определить категории затрат, связанных с ПО

*Действия, свазанные с разработкой ПО:*
- просмотр доступной документации
- составление полного перечня всех элементов, влияющих на понесённые затраты.

*На этом этапе доступными должны быть следующие исходные документы:*
- рабочий план
- спецификации, концепции деятельности
- любые документы, определяющие требования
- документы по разработкке проекта
- стандарты (внутренние, внешние)
- результат переговоров с заказчиками
- проверочные элементы


*Этапы поиска структуры WBS для произвольной системы высшего уровня:*
- опредление существования структуры WBS для произвольной системы высшего уровня
- установление приемлимости ПО в данном случае
- определение момента, при наступлении которого ПО будет сопоставимо с
  действиями
  
*Определение программной архитектуры WBS:*
Определение логической структуры (архитектуры) для программных частей структуры
WBS, на основе существующих в организации стандартных программных архитектур
WBS. Для различных 

Указание сведений для программной архитектуры WBS

Заполнение выбранной структуры СППР действиями, в ходе внедрения которых
выполняется работы

Структура СППР может выступать в роли элемента отслеживания требований

Отлеживание требований 

*Определение категорий затрат для ПО8

Определение категорий оценки затрат для каждого элемента в структуре СППР
В некоторых проектах применяется одна категория затрат - время, с целью
упращения.

В сложных требуется большее кол-во затрат например:
- капитальное оборудывание
- трудозатраты
- элементы накладных расходов могут оцениваться с помощью пропорцианальных
  добавлений в базовых оценках трудозатрат на разработку ПО (%)
  
  
==== Вопрос 23 ====
*Характеристики задач и действий:*

*Действие* – элемент работы выполняемой в ходе осуществления проекта, характерно:
ожидаемая длительность, затраты, прогнозирование к требованиям ресурсов.
Действия могут подразделяться на задачи

*Задачи* – обобщенный термин для работы, не включенный в структуру WBS, но который
потенциально может быть подвержен декомпозиции с последующим исполнением каждой
(не точно) задачи.

*Операции и действия по сопровождению:*
- Коррекция (примерно 20%) — устранение дефектов для поставляемых продуктов (ПО,
  руководства, обучение и т.д.).
- Адаптация (примерно 20%) — компенсация воздействия со стороны изменяющихся
  сред (изменения платформы, изменения правил и методов регулирования (например,
  изменение налоговых ставок), а также учет официальных учетных данных,
  связанных с изменениями в законах). 
- Совершенствование (примерно 60 %) — добавление новых возможностей либо
  изменение свойств в соответствии с запросами пользователей.


==== Вопрос 24 ====
*Методы оценки размера программного обеспечения*
- Оценка количества строк программного кода
- Метод функциональных точек
- Метод точек свойств
- Метод объектных точек
- Блиц модель
- Метод оценивания Wideband Delphi


==== Вопрос 25 ====
*Метод функциональных точек* (Function point, FP) основывается на том, что размер
лучше всего оценивать в терминах количества и сложности функций, реализованных в
данном программном коде, а не посредством количества строк кода. 

*Основоположники:* А.Дж. Альбрехт , Каперс Джонс, группа, the International Function Point User Group (IFPUG)

*Шаги процесса применения метода функциональных точек:*
1. подсчет количества функций в каждой категории;
2. применение весовых множителей сложности;
3. применение факторов среды;
4. вычисление скорректированного множителя сложности;
5. вычисление скорректированных функциональных точек;
6. преобразование в строки кода (LOC)(дополнительно).

*Преимущества анализа методом функциональных точек:*
- применение на ранних стадиях жизненного цикла разработки программного
  обеспечения;
- не зависит от используемого языка программирования;
- обеспечивает адекватность затрачиваемых усилий;
- применение функциональных точек является более естественным при оценке уровня
  производительности;
- может быть измерен уровень производительности проектов, написанных на
  различных языках программирования;
- факторы среды

*Недостатки анализа методом функциональных точек:*
- используются субъективные оценки;
- получаемые результаты зависят от технологии, используемой для их реализации;
- многие модели затрат и трудозатрат зависят от показателя AFP, поэтому
  приходится преобразовывать функциональные точки


==== Вопрос 26 ====
*Метод точек свойств* *Основные положения:* 
Точка свойства представляет собой
новую категорию функции, которая может представлять сложные алгоритмы и
управление (возбуждение/отклик) *Точки свойств обычно применяются в следующих
случаях:*
- ПО, функционирующее в режиме реального времени;
- системное ПО;
- встроенное ПО;
- инженерные приложения (САПР);
- системы автоматизированного производства (АП),
- математическое ПО;
- системы искусственного интеллекта (ИИ);
- ПО, предназначенное для поддержки телекоммуникаций;
- ПО выполняющее функции контроля над процессами.

1. Подсчет точек свойств
2. Подсчет количества алгоритмов Любой алгоритм представляет собой связанную
   вычислительную задачу, которая включена в состав конкретной программы
3. Подсчет весового множителя По умолчанию весовой множитель для алгоритмов
   равен 3. Это значение может варьироваться в диапазоне от 1 до 10.
4. Оценка факторов среды Используются два фактора среды: сложность логики и
   сложность данных. Диапазон значений варьируется от 1 до 5.
5. Вычисление фактора корректировки сложности факторов среды
6. Результат умножения физического количества точек свойств на фактор
   корректировки сложности
7. Преобразование в количество строк кода с помощью таблицы преобразования
   функциональных точек (дополнительно)


==== Вопрос 27 ====

*Метод объектных точек*
*Основные положения*
Каждому уникальному классу или объекту (экран, выводимый отчет и т.д.)
назначается одна объектная точка.  При использовании этого подхода оценка
выполняется на более обобщенном уровне, чем в случае с функциональными точками.
Метод подобен методу функциональных точек и точек свойств, однако применяются
различные факторы преобразования.


*Блиц модель*
*Основные положения*
1) Концепция блиц-моделирования основана на банг-метрике
2) Компоненты любой модели могут умножаться на множитель, вычисляющийся как результат выполнения предыдущих проектов
3) при использовании банг-метрики системы, использующие множество функций, должны оцениваться отдельно от систем, обрабатывающих большие объемы данных
*Преимущества Блиц-модели:*
- Облегчается использование структурных систем
- Повышается степень точности при
  использовании хронологических данных 
- Действия по непрерывному улучшению
  используются при реализации техники оценки
*Недостатки Блиц-модели:*
- Требуется использование методологии проектирования.  
- Оценка не может начинаться до завершения разработки проекта.
- Требуются хронологические данные.
- Не могут оцениваться факторы среды.

*Метод оценивания Wideband Delphi*
предусматривает выполнение следующих этапов:

1. Составление группы экспертов и их знакомство с проблемой, которую нужно
   оценить.
2. Составление каждым экспертом общей оценки трудозатрат. При этом эксперты
   разбивают проблемы на задачи и представляют оценку трудозатрат для каждой
   задачи (участники могут работать анонимно).
3. Совместное обсуждение представленных оценок. Процесс повторяется до тех пор,
   пока не будет выработана общая точка зрения.
			
			
==== Вопрос 28 ====
Терминология повторного использования
*Модифицируемый код* это код разработанный для предыдущих приложений, который
становится пригодным для использования в новых приложениях, после внесения
умеренного объема изменений.

*Повторно использованный код* – это код, разработанный для предыдущих приложений
который будет пригодный без внесения изменений


==== Вопрос 29 ====

Оценка трудозатрат, длительности и стоимости разработки 

*Простое вычисление*
трудозатрат: размер / хронологическая производительность = трудозатраты

*Типичные значения производительности:*
50 — 300 SLOC /месяц (2-15 SLOC /день) для языков высокого
уровня;
60 — 500 SLOC /месяц для языков низкого уровня (ассемблера

*Этапы оценивания*
- Реализация целей, связанных с оценкой затрат
- Определение требований по разработке ПО
- Разработка план действий и распределения ресурсов
- Учет максимально возможного количества деталей
- Использование нескольких независимых техник
- Сравнение, понимание и последовательный просмотр оценок
- Обзор точности оценивания


==== Вопрос 30 ====

*Методы оценки трудозатрат:*
- Метод Delphi.
- Модель СОСОМО.
- Модель СОСОМО II.
- Математическая модель (модель SLIM).
- Инженерный метод оценки трудоемкости проекта PERT.
- Эмпирические модели.

*Основы методики СОСОМО II*
Формула оценки трудоемкости:
	PM = A * SIZE^E * Π(1 - n) EMi
	A = 2.94
	E = B + 0.01 Σ( 1 - 5) SFj	
	B = 0.91

SF = фактор масштаба
EM = множители трудоемкости


==== Вопрос 31 ====
*Математическая модель SLIM*
*Основные положения* Питер В. Норден Лоуренс Ш. Патнам
Функция Нордена/Рейлаха: m(t) = 2 Kat (exp(-at^2))
	m(t) - коэффициент потребности в персонале (количество человек) в любой период времени «t» (выражается в годах) на протяжении времени существования проекта
К - общие трудозатраты проекта, выраженные в человеко-годах (SY)
a - фактор ускорения
Фактор ускорения вычисляется по формуле: 1/2t^2d
где t d - время поставки - время разработки

Размер ПО = трудозатраты х время х количество дефектов
*Уменьшение размера ПО является одним из способов сокращения:*
- графика;
- трудозатрат;
- количества дефектов.

*Размер может быть уменьшен:*
- «зачисткой требований»;
- разбиением проекта на фазы;
- повторное использование ПО;
- применение коммерческих готовых программных продуктов.

Размер ПО = производительность х трудозатраты х время

	S = C * K^(1/3) * td^(4/3)
где:
S = размер ПО (в LOC)
C = фактор среды, зависящий от состояния технологии
К = общие трудозатраты для всего проекта
t d = ограничения времени поставки (график), выраженные в годах

Технолгическая константа С может варироваться в пределах от 610 до 57314
это объединение языков прог, процедур гарантий кач-ва, стандартов, инструментов,
методологий и т.д. Представляется на основе технологических данных.

Оценка:
С = 2000 - плохо
С = 8000 - хорошо
С = 11000 - превосходно

Значение С для различных типов проектов:
* внедренный в режиме реального времени - 1500
* пакетная разработка - 4894
* поддержка и сопровождение - 10040

Преимущества модели SLIM:
- поддерживает исчерпывающий набор инструментов менеджмента разработки ПО
- способствует приобретению хороших привычек членами команды инжиниринга и
  менеджмента (планирование программных проекта, отслеживание проектов, надзор
  над областями ключевых процессов)
- предлагает эффективное планирование
- использует линейное программирование, статистическое моделирование, оценку
  программ, а также техники обзора при оценки затрат на разработку ПО
- позволяет оценщику затрат выполнять следующие функции:
	- калиброку
	- построение
	- измерение ПО
- позволяет настраивать фазы ЖЦ и ключевые стадии для данной среды разработки
- упрощает стратегический процесс принятия решений
- поддерживает оптимальную политику управления персоналом
- поддерживает информацию о количестве дефектов

Недостатки модели SLIM:
- используется при работе с большими проектами (5000 LOC, 1.5 чел-лет, 6 месяцев
  время)
- необходимо заранее определить размер ПО
- оценки являются сверхчувствительными к технологическому фактору
- модель очень чувствительна к времени поставки и оценке размера
- предполгается использование каскадной модели
- пользователи должные помнить о необходимости добавления фаз и интегральных
  задач
- инструмент является сложным.


==== Вопрос 32 ====
*Инженерный метод оценки трудоемкости проекта (Метод PERT)*
Входом для оценки по данному методу служит список элементарных пакетов работ.
Диапазон неопредел. Характеризуется 3 оценками:

1) Mi-наиболее вероятная оценка трудозатрат
2) Oi-минимальная возможность трудозатрат на реализацию пакета работ
3) Pi-пессиместич. Оценка трудозатрат

*Оценка сред тредоемкости эл.пакету*
	Ei = (Pi + 4Mi + Oi) / 6
*Среднеквадратичное отклонение для каждого пакета*
	CKOi = (Pi - Oi) / 6
	
*Суммарная трудоемкости*
	E = Сумма(Ei)
	
*Среднеквадратичное отклонение*
	СКО = √(Σ(СКОi)^2)

*Оценка суммарной трудоемкости проекта (с точностью до 95%)*
	E(95%) = Е + 2СКО


==== Вопрос 33 ====

*Рабочий график* - содержит информацию о продолжительности работы, её основных
стадиях, сведения о конечных результатах и информацию о выполнении
соответствующих задач.

Формы представления рабочих графиков:

* таблица
* диаграмма Ганта
* сетевые диаграммы

*Таблица* - простой перечень действий с указание даты их начала и завершения.
Удобен для работы с длинными перечнями действий в проекте.

*Диаграмма Ганта* (гистограмма) - визуальная последовательность действий
выполняемых в рамках проекта. Полоски, длина которых соответствует длительности
выполения задачи. Недостаток - неудобен при выполнении больших проектов.

*Сетевая диаграмма* - упорядоченный набор условно-графических обозначений,
содержащих названия действия и его приоритет, также доп информация
(продолжительность, дата начала|завершения, уровень ответственности
лица-исполнителя). 

*Методы построения сетевых диаграмм:*
- GERT - метод графической оценки и обзора, связан с анализом, позволяет
  совершать условную и вероятностную оценку приоритета и продолжительности
  действий
- PERT - метод программной оценки и обзора, только вероятностная оценка
  продолжительности действий
- CPM - метод критического пути, более простой, т.к. в нем фиксирована
  продолжительность действий и логика определения приоритета
- PDM - метод предшествования
- ADM - метод стрелочных диаграмм.


==== Вопрос 34 ====

*Построение рабочих графиков с применением методов PERT & CPM*

CPM - метод критического пути (Critical Path Method)
PERT - ракетная подлодка *polyaris*

*PERT*, виды оценки продолжительнсть действий (с использованием beta
распределения):
- оптимистическая
- наиболее вероятная
- песимистическая

Формула: (опт + 4х наиб вероят + пес) / 6

средневзвешенная величина PERT фактически соответствует середине треугольного
распределения, которая используется в кач-ве аппроксимации для beta
распределения.

*Метод CPM* прогнозирование общей продолжительнсти проекта на основе определения
последовательности действий, которая обладает наименьшей длительностью в составе
рабочего графика.

Общие положения:
Основное внимание уделяется запасу времени между двумя действиями.

Применяются термины: 
* резерв времени
* свободный запас времени
* запас пути
* критический путь - нулевой запас времени между всеми своими действиями в
  рамках выполнения проекта
  
Последовательность действий:
* анализ структуры WBS
* установка соотношений в соответствия с приоритетами действий в сети
* построение сети
* выполнение двунаправленного прохода по сети с анализом действий и вычислением
  оценочных значений для каждого узла, при этом определяется время наискорейшего
  начала и завершения действия (прямой проход), при обратном проходе действие
  начинается в конечном узле, после чего вычисляется максимальный срок
  начала и завершения для каждого узла сети, пока не достигнем начального пути.
* выявление критического пути

По окончанию вычислений каждый узел содержит информацию о запасе времени.
Критический путь соединяет узлы с нулевым запасом времени, при увелечении
времени любого из его узлов увеличивается длина критического пути и время
завершения всего проекта. Любые изменения продолжительнсти любого узла, могут
привести к изменению критического пути, поэтому после каждого такого изменения
необходимо провести перерасчёт. Во всех вычислениях при определении запаса
времени критического пути, не рассматиривалось наличие каких-либо ресурсов,
необходимых для фактического выполнения работы (это ~~недостаток~~)


==== Вопрос 35 ====

*Построение рабочих графиков с применением метода критической цепи*

Доктор Элиях Голдрат (теория ограничений)

Основана на теории системы - все системы содержат нужные ограничения, задача
состоит чтобы определить эти ограничения.

1. Определения ограничений системы
2. Принятие решения относительно максимально эффективного использованя
   ограничений системы
3. Организация системы в соответствии с принятым решением    
4. Улучшение ограничений системы
5. Если какое-либо ограничение было снято, осуществляется переход на этап 1

*Цель:* Увеличение производительности всей системы, посредством сокращения
незавершенного производства, и снижения эксплуатационных расходов (стоимость
запуска системы).

*Критическая цепь* - путь из действий, на которых существуют ключевые
ограничения ресурсов, и если расширить узкие места на критической цепи, то
повысим производительность организации. Самый длинный путь в схеме, когда
учитываются как действия так и ресурсы.

*Критический путь* - самый длинный путь в схеме, когда учитываются только
действия

Подход Голдрата заключается в том, что начинается с конца, и с продвижением в
начало проекта, основное внимание уделяется максимально-эффективному
использованию ресурсов. При этом некоторые члены организации могут
бездействовать, пока другие ресурсы не будут подготовлены.

Для оптимизации производительности проекта основное внимание уделяется не
ограничениям выполняемых действий, а ресурсным ограничениям и управлению
неопределенностями (рамещению буферов).

Неопредленность в графике работ, можно обрабатывать с помощью внедрения
стратегических пунктов (*буферов*) представленных в виде действий.

Полный процесс построения рабочих графиков:
1. Разработка структуры пооперационного перечня работ(WBS)
2. Определение взаимосвязи между действиями
3. Разработка сетевой диаграммы (*PDM*) на основании WBS и информации о
   взаимосвязях
4. Анализ по методу CPM
5. Приемлемо-ли длина критического пути и его состав
6. Распределение ресурсов (перераспределение)
7. Преобразование цепи в диаграмму Ганта
8. Разработка ценовой базы и определение кривых затрат


==== Вопрос 36 ====

*Планирование управления содержанием*

Порядок разработки плана управления содержанием:
- определить источники запросов на изменение
- установить порядок оценки и утверждения|отклонения изменения содержания
- определить порядок документирования изменений содержания

Порядок документирования изменений содержания
- выявить объекты изменений
- спроектировать и детально описать изменения во всех выявленных объектах
- оценить затраты на внесение изменений, тестирование изменений и регрессионное
  тестирование продукта

*Организационная структура* – согласованное и утвержденное распределение ролей,
обязанностей и целей деятельности ключевых участников проекта
Организационная структура включает:
- систему рабочих взаимоотношений между рабочими группами проекта;
- систему отчетности, оценки хода выполнения проекта;
- систему принятия решений.

*План по управлению конфигурацией должен включать работы:*
- по обеспечению единого хранилища всей проектной документации и
  разрабатываемого программного кода;
- по обеспечению сохранности и восстановление проектной информации после сбоя;
- по настройке рабочих станций и серверов, используемых участниками проектной
  команды;
- необходимые для организации сборки промежуточных выпусков системы, а также ее конечного варианта.

*Основные положения при планировании работы по качеству:*
- продукт проекта не должен обладать наивысшим возможным качеством, которое
  недостижимо за конечное время;
- необходимое качество продукта определяется требованиями к нему;
- основная задача обеспечения качества это не поиск ошибок в готовом продукте
  (выходной контроль) а их предупреждение в процессе производства.

*Содержание плана работ по качеству:*
- оценку соответствия программных продуктов и технологических операций
  применяемым стандартам, процедурам и требованиям;
- определение отклонений по качеству, выявление их причин, применение мер по их
  устранению, а также контроль исполнения принятых мер и их эффективности;
- представление высшему руководству независимой информации о несоответствиях, не
  устраняемых на уровне проекта.
  
  
==== Вопрос 37 ====

*Рабочее планирование*
*Базовое расписание* - ориентир для мониторинга состояния дел проекта на макро
уровне.
*Рабочий план* применяется для оперативного управления проектом

Метод *"набегающей волны"* - работа которую надо выполнять в ближайшей время,
подробно планируется на низшем уровне WBS. А далеко отстоящая работа планируется
на высоком уровне WBS.
*Элементарная работа* - отдельные функциональные требования к программному
продукту или запрос на изменение ПП.
Трудоемкость элементарной работы каждого из исполнителей должна быть от 4 до 20
чел-часов.

Система управления задачами и багтреккинга (система отслеживания ошибок). Она
позволяет задавать последовательность перехода в задаче от исполнителя к
исполнителю, управлять приоритетами работ и адекватно отслеживать их статус
(анализ, проектирование, тестирование ...). Работа должна считаться законченной,
когда реализация требований должна быть протестирована и задокументировано.

Метод распределения работ: (зависит от уровня зрелости команды проекта)
- директивно - с жесткой постановкой срока и контролем исполнения каждой задачи.
- либо эти полномочия делегируются исполнителю.

Можно рекомендовать еженедельные собрания по статусу проекта, как правило
обсуждаются 3 вопроса:
 - угрозы и проблемы
 - анализ результата за неделю
 - уточнение приоритета задач на новую неделю

Рекомендация использовать правило 50 на 100 при определении выполения задач.
Если работа по задаче уже начата, то учитываем её как выполененую на 50 %, а
если задокументирована и протестирована то на 100 %.

*Принципы кол-венного управления проектом*

Для каждого измеримого показателя должны быть определены плановые значения.
Для каждого планового значения должны быть определены 3 области критичности
отклонений:
- допустимые отклонения (не требуется никаких управляющих воздействий);
- критичные отклонения (требуется тщательный анализ причин отклоенния, и при
  необходимости применение корректирующих действий).
- недопустимые отклонения (требуется срочный анализ причин отклоенния, и при
  необходимости применение корректирующих действий).
  
Измерение и анализ выполнения проекта:
Измерения в проекте делаются регулярно не реже 1-2 недель, с целью выявить
причины наступивших и возможных критичных и допустимых отклонений. Результат
анализа становятся планирование корректирующих действий по компенсации
недопустимых отклонений, их реализация, мониринг результативности этих действий
Сохранения резульататов измерений в депозитарий проекта.

*Метрические показатели проекта:*
- *Стабильность проекта* – общее количество принятых (утвержденных спонсором или
  заказчиком) в плане управления проектом.
- *Объем исходного кода* – чем больше объем исходного кода, тем больше времени
  потребуется времени на внесение изменений и исправления ошибок.
- *Средняя производительность* – отношение текущего размера проекта к
  фактическим затратам по проекту.
- *Дефектность продукта* – количество выявленных дефектов на единицу продукции.
- *Доля не устраненных дефектов* – отношение количества незакрытых максимально
  критичных и критичных дефектов к количеству выявленных несоответствий.
- *Средние затраты на сопровождение* – средние трудозатраты на исправление
  одного дефекта
- *Документированность кода* – определяет процент строк исходного кода с
  комментариями по отношению к общему количеству строк кода.

*Информационное управление проетком*
*Средства информационного управления проектами:*
- Среды менеджмента конфигурации
- Инструментальные средства разработки
- Памятные записи и замечания
- Журналы вывода – содержат индикаторы проблем, которые возникают в рамках  проекта
- Журналы дефектов – содержат информацию по качеству
- Информационная система управления проектами – обеспечивает своевременную
  обратную связь, которая включает элементы диаграмм тройных ограничений,
  мониторинга производительности, проверки соответствия продукта техническим
  требованиям, а также достижение качества.


==== Вопрос 38 ====

*Управление графиком и затратами. Базовые линии стоимости*

Базовые линии стоимости - распределенный во времени бюджет проекта, используемый
для его контроля и выполнения. Накапливающиеся затраты и вид эсобразный

*Количественное управление графиком и затратами*

Необходимо проанализировать отклонения проекта по срокам и затратам, делается с
помощью метода освоенного объема:

*Метод освоенного объема*
1. Оценивание отклонения от графика SV (Shedule Variance):
	SV = EV – PV, где
	EV (Earned Value) - освоенный объем
	PV (Planned Value) - плановый объем
2. Оценивание отклонения от затратам CV (Cost Variance):
	CV = EV – AC, где
	EV (Earned Value) - освоенный объем
	AC (Actual Cost) - фактические затраты

3. Оценивание относительных показателей
 	- Индекс выполнения сроков SPI (Schedule Performance Index):
		SPI = EV / PV
	- Индекс выполнения стоимости CPI (Cost Performance Index)
		CPI = EV / AC

*Шаги по свертыванию графика:*
1. Проанализируйте сетевой график
2. Найдите все действия на критическом пути (проверьте его на предмет изменений)
3. Найдите действие (или действия), для которых установлен наиболее
   благоприятный компромисс типа «время-затраты»
4. Устраняйте действие по одной единице или сокращайте время его выполнения до
   тех пор, пока проект больше не сможет быть технологически сжат


==== Вопрос 39 ====

*Риск* - событие, возникновение которого отрицаетельно или положительно сказывается
на положении проекта

*Характеристика риска:*
* Причина или источник появления риска
* Симптомы риска
* Последствия риска проблема или возможность возникающая после реализации риска
* Влияние риска на достижение целей проекта (график, стоимость, тех
  характеристики)
  
Риск - это всегда вероятность и последствия

*Категории риска:*
- известные риски - можно идентифицировать и подвергнуть анализу, спланировать
  действия
- неизвестные риски - невозможно предвидеть

Снижение вероятности возникновения риска и значимости воздействия на проект - этоцель менеджмента рисков

*Планирование управления рисками*

Процесс определения подходов и планирование операцией по управлению 

*Качественное планирование рисков позволяет:*
- выделить достаточное кол-во времени и ресурсов для выполнения операций по
  управлению рисками;
- определить общие основаения для оценки рисков
- повысить вероятность успешного достижения результатов проекта

*Исходные данные для планирования управления рисками:*
- толерантность к риску организации и лиц, участвующих в проекте;
- стандарты организации - заранее разработанные подходы к управлению рисками
- описание содержани проекта
- план управления проектом - как будет выполнятся проект


==== Вопрос 40 ====

*Планирование реагирования на риски* - процесс разработки методов и определения
действий по увеличению возможностей и снижению угроз для целей проекта. 

Метод реагирования:
- уклонение от риска - предпологает изменение плана управления проектом, таким
  образом чтобы исключить угрозу вызванную негативным риском.
- передача риска - переложение негативных последствий угрозы на третью сторону с
  ответственностью
- снижение риска - снижение веротности или последствий негативного события до
  приемлемых пределов
- принятие риска - команда проекта принимает решение не изменять план проекта
  или не нашла другую стратегию реагирования на этот риск (все неизвестные
  риски)

*Задачи мониторинга и управления рисками:*
- Пересмотр рисков
- Аудит рисков
- Анализ отклонений и трендов


==== Вопрос 41 ====

*Качественный анализ рисков:*
- Определение вероятности реализации рисков
- Определение тяжести последствий реализации рисков
- Определение ранга по матрице вероятности - последствия
- Определение близости наступления риска
- Оценка качества использванной информации

Для определение ранга используется матрица вероятности - последствия, где

	ранг = вес вероятности * значимости последствий
 
*Количественный анализ рисков*
Вычисляется фактор зависимости проекта от риска
RE = Вероятностиь риска * Количесво ставок

Метод количественного анализа рисков:
- *Анализ чувствительности* - какие риски обладают наибольшим потенциальным
  влиянием на проект, в процессе анализа устанавливается в какой степени
  неопределенность каждого элемента проекта отражается на исследуемой цели
  проекта, и если остальные элементы проекта принимают базовые значения.
 	- Выберите переменные
	- Определеите приемлемый диапазон вариации
	- Определите возникающий эффект в проекте при изменении дипазона вариации 
  Резульаты в диаграмме *торнадо*
- *Анализ дерева решений* - проводится анализ последствий возможных решений,
  описывает рассматриваемую ситуацию, с учетом каждой из имеющихся возможностей
  выбора и сценария. Критерием для принятия решений, служит мат ожидание потерь
  от его принятий
- *Моделирование и имитация - моделирование методом Монте-Карло* - модель для
  определения последствий на результаты проекта в целом:
  - Выбрать несколько переменных, важных в проекте
  - Выбрать прямолинейный диапазон вариации переменной
  - Присвоить каждой переменной значений из диапазона
  - Выполнить имитацию несколько раз, для получения вероятностного распределения
	результата
  - сформулировать диапазон


==== Вопрос 42 ====

Главные причины провала программных проектов:
1. Требования заказчика отсутствуют  не полны, подвержены частым изменениям
2. Отсутствие необходимых ресурсов и опыта
3. Отсутствие рабочего взаимодействия с заказчиком
4. Неполнота планирования – «Забытые работы»
5. Ошибки в оценках трудоемкостей и сроков работ

Подходы реагирования на риск *изменения требований проекта*:
- Переоценка проекта каждый раз, когда требования добавляются / изменяются
  (уклонение).
- Итерационная разработка. Контракт с компенсацией затрат на основе «Time &
  Materials» (передача риска Заказчику).
- Учет в оценках трудоемкости и сроков возможности роста требований, например,
  на 50% (резервирование риска).
  
Подходы реагирования на риск *недостатка квалифицированных специалистов*:
  - Привлечение экспертов-консультантов на начальных этапах
  - Учет в оценках трудоемкости издержки на обучение сотрудников
  - Уменьшение потерь от текучести кадров, привлекая на начальном этапе
	избыточное число участников
  - Учет в оценках «время разгона» для новых сотрудников Меры установления
	доверительных отношений с заказчиком:
  - Постоянное взаимодействие
  - Согласование пользовательских интерфейсов и разработка прототипа продукта
  - Периодические поставки тестовых версий конечным пользователям для их оценки


==== Вопрос 43 ====

*Управление конфигурацией* - комплекс методов направленные на систематический
учет изменений вносимых в программный продукт в процессе его разрботки и
соправождения, сохранение целостности изменений, предотвращение нежелательных
эффектов, и формализация процессов внесения измнений. Совокупность операций,
предназначенных для:
- контроля изменений путём идентификации рабочийх продуктов
- установления взаимовсвязи между ними.
- определения механизмов для управления различными версиями этих рабочих
  продуктов
- контроля назначенных изменений
- контроля и регистрации изменений

*SCM:*
- идентификацию элементов конфигураций
- постаянный контроль изменений и поддержку целостности по
- тарссировку (пошаговая фиксации изменений) конфигураци на всем ЖЦ программного
  продукта
  
Понимание сути SCM
План и политика - стратегия, где в сжатой форме определены ожидаемые результаты,
которые надеется получить организация
Процессы SCM - необходимы процессы документирование, отражающие способы
выполенения SCM.

*Метрические показатели* отражают эффективность, благодаря которым организация
получает макс пользу от внедрения SCM
*Элементы конфигурации* - объект в конфигурации, удовлетворяющий функции конечного
использования, который может быть уникально идентифицирован в данной точке SCM.


==== Вопрос 44 ====

*Основные функции SCM:*
- Идентфикация - обозначение каждой части ПО, с целью распознавония в дальнейшем.
- Контроль - анализ, предложенных изменений в элементе конфигурации.  Цель
  контроля - принять обоснованные решения и признать возможные последствия
  изменения системы.
- Аудит - утверждение того, что запрашиваемые изменения действительно выполнены.
  Позволяет менеджерам определить, происходит ли эволюция ПО согласно с
  требованиями.
- Учет статуса - представляет статистическую информацию, предысторию,
  позволяющая определить, когда и какие изменения происходили в программном
  проекте. Осуществить ревизию требования SCM, также дает возможность охватить
  весь спект информации, в отношении деятельности организации на протяжении
  всего ЖЦ продукта.
  
*Характеристики и свойства. необходимые для реализации функции*

*Идентификация:* 
- способность различать элементы конфигурации
- способность находить их взаимосвязь
- знание технический особенностей управления конфигурацией
- ориентация на системотехнику (системный подход)
- программирование.

*Контроль:*
- способность оценивать преимущства относительно затрат
- системный подход (баланс инжинерных|управленческих качеств, а также качеств
  пользователя|продавца)
- способность оценивать изменения при проектировании ПО.

*Аудит:*
- пристальное внимание к деталям
- способность определять совместимость ПО
- способность находить ошибки
- необходимо иметь большой опты относительно технических аспектов системотехники
  или разрботки ПО.
  
*Учет статуса:*
- способность обращать внимание на примечания и регистрировать данные
- способность обрабатывать данные
- некоторые технические знания
- ориентация на системотехники
- программирование.


==== Вопрос 45 ====

*Инструментальные средства управления конфигурацией*

В основе требований к инструментальным средствам и критерии их выбора лежит
набор характеристик, позволяющие получить непротиворечивые данные о реальной
среде разработки ПО.

*Основные критерии отбора инструментальных средств:*
- Многопользовательская поддержка - несколько пользователей работают над
  продуктом. Пользователи должны сохранять всю информацию в совместно
  используемом центральном хранилище, а SCM должна обепечить параллельную,
  контроллируемую работы над различными документами проекта
- Интуитивные графический интерфейс пользователя (нужно различным категориям
  пользователей)
- Соответствие среде разработки организации - организация должна заранее
  установить используемые платформу аппаратного обеспечения и ПО
- Масштабируемость - инструментальное средство должно обеспечивать выполнение
  проектов разного масштаба
- Гибкость при интеграции других инструментальных средства по разработке ПО -
  инструментальные средства для программирования, внедрения, тестирование ПО,
  должны взаимодествовать посредством общего хранилища SCM
- Легкость установки и настройки
- Модифицируемость моделей - хотя набор моделей определеяется заранее, каждая из
  моделей должна быть модифицируемой и обладать возможностью к расширению.  Это
  особенно важно, поскольку менеджеры и разработчики адаптируют модели к
  процессу разработки ПО согласно с целями компании. Функцианальные модели
  должны быть адаптированы к функциям, которые выполняют различные специалисты,
  учавствующие в процессе.
- Менеджемент процессов - включает поддержку ЖЦ и представления объекта, в
  соотвтствии с гибкими подходами
- Управление, основанное на целевых моделях - позволяет подключать различные ЖЦ
  к различным объектам
- Широкая поддержка этапа разработки - инструментальное средство должно помочь
  разработчику в определении набора объектов, подлежащих модернизации или
  обновлению
- Менеджемент неразрабатываемых объектов - инструментальное средство должно
  управлять всеми компонентами проектами, а не только исполняемым кодом
  (документы, их версии, и выпуски).
- Управлению допуском - не все должны иметь право вносить изменения в различные
  части программного продукта
  
*Преимущества процесса управления конфигурацией*
  
  *Аспекты реализации основных преимущств SCM*
  * Контроль - дает возможность анализировать, утверждать и применять изменения
	в элемент конфигурации
  * Качество - отслеживание качество работ специалистов, чтобы обеспечить
	высокое качество с помощью отслеживания изменений, сделанных в продукте в
	течении его ЖЦ, определяют соответсвующие показатели конечного продукта
  * Менеджемент - связан с автоматизацией идентификации и управления элементами
	конфигурации на протяжении ЖЦ, до окончательной компоновки части продукта
	или поставки.	
  * Экономия затрат - снижение себестоимости осуществляется на протяжении всего
	ЖЦ. SCM - позволяет управлять изменениями требований и календарным планом и
	осуществлять поддержку семейств продуктов благодря примениние SCM. Семейство
	можно анализировать. Учет воздействий на все версии и релизы позволяет
	снизить побочные эффекты, через контроллируемые изменения.

*Решение проблем, возникающих при разработке ОП, с помощью системы управления конфигурацией*

*Решаемые проблемы:*
- Недостаток прозрачности - благодаря SCM, все элементы конфигурациии и
  компоненты становятся видимыми для версий, релизов, и семейств продуктов
- Недостаток контроля - сложно оценить объем выполнененой и оставшейся работы,
  SCM предоставлят механизм управления процессом разработки через определение
  фактически затраченных и плановых ресурсов, и оценивание будущих затрат путем
  экстрополяции
- Недостаток трассировки - отсутствие связи между отдельными событиями проекта
  приводит к его провалу. SCM обеспечивает пошаговую фиксацию изменений и
  взаимосвязь среди версий, релизов и семейств продуктов
- Недостаток мониторинга - SCM обеспечивает мониторинг, и менеджеры могут
  принимать взвешенные решения не выбиваясь из графиков и не превышая бюджет.
- Неконтроллируемые изменения - ПО являетсчя достаточно гибким, и пользователи
  генерируют новые пожелания к ПО. Все инструментальные средства поддерживают
  механизм для гибкого управления изменениями ПО в связи с потребностями
  пользователей в течении процесса его разработки
  
  
==== Вопрос 46 ====
*Отбор команды разработчиков проекта*
*Этический кодекс программиста:*
- Общественные интересы - действия прогрммистов должны соответствоввать
  общественным интерсам;
- Клиент и работодатель - программисты должны выполнять требования клиента и
  работодателя
- Продукт - программисты должны быть уверены что продукт соответствует
  стандартам;
- Критицизм - инжинеры-программисты должны придерживаться целостности и
  независимости своих суждений
- Менеджмент - руководство должно придержитваться этический норм;
- Профессианализм - программисты должны быть честными и поддерживать репутацию;
- Коллегиальность - поддержка коллег;
- Самосовершенстовавание - постаянное повышение квалификации.

==== Вопрос 47 ====


