== Модели разработки программиного обеспечения == 

Модель разработки ПО - формализованное предствление разработки этого ПО.

*Подход «Как получится»*. Разомкнутая система управления. Полное доверие
техническим лидерам. Планирование неформальное или словесное. Время и бюджет не
контроллируется. 

*Подход «Водопад» или каскадная модель*. Жесткое управление разработкой со слабой
обратной связью. Расчёт опорной траектории выполнения проекта, измерение
отклонений, и если они есть, коррекция и возврат на траекторию.

«Гибкое управление». Расчет опорной траектории проекта, измерение отклонений,
расчет новой попадающей траектории и коррекция для выхода на неё. 

== Классическае касскадная модель разработки ПО == 

*Краткая характеристика модели:*

* выполнение разработки реализуется с помощью упорядоченной последовательности
  шагов;
* каждая последующая фаза начинается только тогда, когда полностью завершена
  предыдущая.
* каждая фаза имеет определенные критерии входа и выхода;
* генерируется внутренние или внешние данные проекта, включая документацию и ПО;
* переход от одной фазы к другой осуществляется путем формального обзора.

*Преимещества каскадной модели:*

- доступна для понимания, проста и удобна в применении;
- хорошо срабатывает для достаточно понятных, но трудно разрешимых проектов,
  когда требование к кач-ву стабильны и доминируют над требованиями к затратам и
  графику выполнения проекта;
- обеспечивает строгий контроль менеджмента проекта и процедуры по контролю за
  качеством.
- дефекты можно обнаружить на более ранних этапах разработки.


*Недостатки каскадной модели:*

- трудность исправления совершенных ошибок;
- модель не расчитана на динамические изменения в требованиях;
- необходимость в жестком управлении и контроле;
- весь программный продукт разработывается за один раз.
- отсуствие возможности учесть переделку и итерации за рамками проекта.

*Область применения каскадной модели:*

- требования и их реализация максимально четко определены и понятны;
- используются неизменяемое определение продукта и вполне понятные технические
  методики;
- если компания имеет опыт построения определенного рода системы;
- используются при выполнении больших проектов.

== V-образная модель ==

*Краткая характеристика модели:*

- особое значение придается действиям, направленным на верификацию и аттестицию
  продукта;
- модель демонстр. что тестирование продукта обсуждается, проектируется и
  планируюется на ранних этапх ЖЦ;
- испытания и приемка системы заказчиком определяются на этапе планирования, а
  компоновочное испытание системы - на фазах анализа, разработки.
- подчеркнуты взаимосвязи между фазами и эти фазы необходимо рассматривать
  параллельно. 

*Преимещества V-образной модели:*

- фаза модульного тестирования подтверждает правильность детализованного
  проектирования;
- фазы интеграции и тестирования реилизует архитектурное проектирование или
  проектирование на высшем уровне;
- фаза тестирования системы подтверждает правильность выполнения этапа
  разработки требований продукта и спецификаций;
- возможность отслеживание хода процесса разработки;
- модель проста в использовании.


*Недостатки V-образной модели:*

- непросто справиться с параллельными событиями;
- не учтены итерации между фазами;
- не предусмотрены внеснение изменений на разных этапах ЖЦ;
- тестирование требований в ЖЦ происходит слишком поздно.

*Область применения V-образной модели:*

- когда вся информация о требованиях доступна заранее;
- когда доступными являются информация о методе реализации решения и технолгия;
- V-образная модель - это отличный выбор для систем, в которых требуется высокая
  надёжность. 


== Эволюционная модель быстрого прототипирования ==

*Краткая характеристика*

- быстрая частичная реализация системы создается перед этапом определения
  требований или на его протяжении;
- конечные пользователи системы используют ускоренный прототип, а затем путем
  обратной связи, сообщают свое мнение о нем команде, работающей над проектом,
  для согласования требований;
- процесс уточнения продолжаеся до тех пор, пока пользователь не получит что ему
  нужно.
- после завершения процесса определения требований, путем разработки ускоренных
  прототипов получают детальных проект системы.
  

*Преимещества модели прототипирования:*

- взаимодействие заказчика с системой начинается на раннем этапе разработки;
- модель позволяет выполнять гибкое проектирование и разработку;
- возможность возникновения разногласий при общении заказчиков с разработчиками
  минимизорована;
- благодаря меньшему объему доработок уменьшаются затраты на разработку.
- сокращаются общие затраты.

*Недостатки модели прототипирования:*

- с учетом создания рабочего прототипа, качеству всего ПО может быть уделено
  недастаточно внимания;
- решение трудных проблем может отодвигаться на будущее;
- если выполнение проекта завершается досрочно, у конечного пользователя
  останеться только лишь частичная система;
- заказчик может предпочесть получить прототип, вместо версии системы;
- прототипирование вызывает зависимость и может продолжаться очень долго.

*Область применения модели прототипирования:*

- когда требования не известны заранее, не постаянны и требуют изменений или
  детального уточнения;
- когда нужна проверка концепции;
- когда выполняется новая, не имеющая аналогов разработка;
- когда требутся продемонстрировать техническую осуществимость, когда высок
  технический риск;
- особенно хорошо подходит для разработки интенсивно используемых систем
  пользовательского интерфейса.
  
Примеры:
- интерактивные системы;
- СППР;
- сенсорные системы;
- системы медицинской диагностики;


== Модель быстрой разработки приложений ==

*Краткая характеристика модели:*

- пользователь задействован на всех фазах ЖЦ разработки проекта;
- метод основывается на последовательности итераций эволюционной системы и
  прототипов;
- разработка каждого интегрированного продукта ограничивается четко определённым
  периодом времени;
- использование мощных инструментальных средств разработки, высокий уровень
  фактора повтор. исользования;
- основное участие пользователя предустмотрено в процессе планирования и
  проектирования.
  

*Преимущества модели быстрой разработки приложений:*

- время цикла разработки для всего проекта можно сократить благодаря
  использованию мощных инструментальных средств;
- благодаря сокращенному времени цикла, а также меньшему кол-ву разработчиков
  уменьшаются затраты и риски связанных с графиком;
- привлечение заказчика на постаянной основе снижает риск его
  неудовлетворённости продуктом.
  
*Недостатки модели быстрой разработки приложений:*
- если пользователи не могут принимать участие в процессе разработки, это может
  негативно сказаться на конечном продукте.
- необходимо достаточное количество высококвалифицированных разработчиков,
  готовых совместно с заказчиком, к быстрому выполнению действий ввиду жестких
  временных ограничений;
- использование модели может оказаться неудачным для повторного использования
  компоненты.

*Область применения быстрой разработки приложений:*

- системы поддающиеся моделированию и масшатибированию;
- когда конечный пользователь может принимать участие в процессе разработки на
  протяжении всего ЖЦ;
- при выполнении проектов разработка которых должна быть выполнена в сокращенные
  сроки;
- когда существуют пригодные для повторного использования компоненты;
- в системах в которых не требуется достижение высокой производительности.

== Инкрементная модель разработки ПО ==

*Краткая характеристика инкрементной модели:*

- инкрементная разработка представляетс собой процесс частичной реализации всей
  системы и медленного наращивания функциональных возможностей или
  эффективности;
- инкрементная модель действует по принципу каскадной модели с перекрытиями,
  благодаря чему функциональные возможности, пригодные для эксплуатации
  формируются раньше;
- применяются инкрементные этапы;
- каждый инкремент проходит через фазы ЖЦ:
	- кодирование
	- тестирование
	- поставку

*Преимущества инкрементной модели:*

- не требуется заранее тратить средства, необходимые для разработки всего
  проекта
- в результате выполнения каждого инкремента получается функциональный продукт;
- использование последовательных позволяет усовершенствовать продукт, затратив
  при этом намного меньше средств, чем требуется для повторной разработки;
- ускоряется начальный график;
- снижается риск неудачи и изменения требований.

*Недостатки инкрементной модели:*

- в модели не предусмотрены итерации в рамках каждого инкремента;
- определение полной функциональной системы должно осуществляться в начале ЖЦ,
  чтобы обеспечить определение инкремнтов;
- формальный критический анализ и проверку намного труднее выполнить для
  инкрементов чем для системы в целом;
- для модели необходимы качественное планирование и проектирование.

*Область применения инкрементной модели:*

- если большинство требований можно сформулировать заранее;
- потребность быстро доставить на рынок продукт, имеющий функциональные базовые
  свойства;
- для проектов, на выполнение которых предусмотрен большой пероид времени, год;
- когда однопроходная система связана с большой степенью риска.


